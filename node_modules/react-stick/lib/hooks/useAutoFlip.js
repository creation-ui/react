"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const invariant_1 = __importDefault(require("invariant"));
const react_1 = require("react");
const defaultPosition_1 = require("../defaultPosition");
const utils_1 = require("../utils");
const useAutoFlip = (enableAutoHorizontalFlip, enableAutoVerticalFlip, initialPosition, initialAlign) => {
    const [currentPosition, setCurrentPosition] = (0, react_1.useState)(initialPosition);
    const [currentAlign, setCurrentAlign] = (0, react_1.useState)(initialAlign || (0, utils_1.getDefaultAlign)(initialPosition));
    (0, react_1.useEffect)(() => {
        setCurrentPosition(initialPosition);
        setCurrentAlign(initialAlign || (0, utils_1.getDefaultAlign)(initialPosition));
    }, [initialAlign, initialPosition]);
    const checkAlignment = (0, react_1.useCallback)((nodeRef, anchorRef) => {
        const [horizontalPosition, horizontalAlign] = autoFlipHorizontally(nodeRef, anchorRef, {
            enabled: enableAutoHorizontalFlip,
            initialPosition,
            initialAlign,
            currentPosition,
            currentAlign,
        });
        const [verticalPosition, verticalAlign] = autoFlipVertically(nodeRef, anchorRef, {
            enabled: enableAutoVerticalFlip,
            initialPosition,
            initialAlign,
            currentPosition: horizontalPosition,
            currentAlign: horizontalAlign,
        });
        if (verticalPosition !== currentPosition) {
            setCurrentPosition(verticalPosition);
        }
        if (verticalAlign !== currentAlign) {
            setCurrentAlign(verticalAlign);
        }
    }, [
        currentAlign,
        currentPosition,
        enableAutoHorizontalFlip,
        enableAutoVerticalFlip,
        initialAlign,
        initialPosition,
    ]);
    return [currentPosition, currentAlign, checkAlignment];
};
exports.default = useAutoFlip;
const autoFlipVertically = (nodeRef, anchorRef, { enabled, initialPosition, currentPosition, initialAlign, currentAlign, }) => {
    if (!enabled) {
        return [currentPosition, currentAlign];
    }
    const positionedToBottom = (0, utils_1.isPositionedToBottom)(currentPosition);
    const positionedToTop = (0, utils_1.isPositionedToTop)(currentPosition);
    if ((0, utils_1.isPositionedToBottom)(initialPosition)) {
        if ((0, utils_1.fitsOnBottom)(nodeRef, anchorRef)) {
            if (!positionedToBottom) {
                return [switchToBottom(currentPosition), switchToTop(currentAlign)];
            }
        }
        else if ((0, utils_1.fitsOnTop)(nodeRef, anchorRef) && !positionedToTop) {
            return [switchToTop(currentPosition), switchToBottom(currentAlign)];
        }
    }
    if ((0, utils_1.isPositionedToTop)(initialPosition)) {
        if ((0, utils_1.fitsOnTop)(nodeRef, anchorRef)) {
            if (!positionedToTop) {
                return [switchToTop(currentPosition), switchToBottom(currentAlign)];
            }
        }
        else if ((0, utils_1.fitsOnBottom)(nodeRef, anchorRef) && !positionedToBottom) {
            return [switchToBottom(currentPosition), switchToTop(currentAlign)];
        }
    }
    return [currentPosition, currentAlign];
};
const autoFlipHorizontally = (nodeRef, anchorRef, { enabled, initialPosition, currentPosition, initialAlign, currentAlign, }) => {
    if (!enabled) {
        return [currentPosition, currentAlign];
    }
    const positionedToLeft = (0, utils_1.isPositionedToLeft)(currentPosition);
    const positionedToRight = (0, utils_1.isPositionedToRight)(currentPosition);
    if ((0, utils_1.isPositionedToRight)(initialPosition)) {
        if ((0, utils_1.fitsOnRight)(nodeRef, anchorRef)) {
            if (!positionedToRight) {
                return [switchToRight(currentPosition), switchToLeft(currentAlign)];
            }
        }
        else if ((0, utils_1.fitsOnLeft)(nodeRef, anchorRef) && !positionedToLeft) {
            return [switchToLeft(currentPosition), switchToRight(currentAlign)];
        }
    }
    if ((0, utils_1.isPositionedToLeft)(initialPosition)) {
        if ((0, utils_1.fitsOnLeft)(nodeRef, anchorRef)) {
            if (!positionedToLeft) {
                return [switchToLeft(currentPosition), switchToRight(currentAlign)];
            }
        }
        else if ((0, utils_1.fitsOnRight)(nodeRef, anchorRef) && !positionedToRight) {
            return [switchToRight(currentPosition), switchToLeft(currentAlign)];
        }
    }
    return [currentPosition, currentAlign];
};
const switchVerticalPosition = (position, target) => {
    const newPosition = defaultPosition_1.positions.find((standardPosition) => standardPosition === `${target} ${position.split(' ')[1]}`);
    (0, invariant_1.default)(newPosition, `Could not determine new position. Old position "${position}", new vertical target "${target}"`);
    return newPosition;
};
const switchHorizontalPosition = (position, target) => {
    const newPosition = defaultPosition_1.positions.find((standardPosition) => standardPosition === `${position.split(' ')[0]} ${target}`);
    (0, invariant_1.default)(newPosition, `Could not determine new position. Old position "${position}", new horizontal target "${target}"`);
    return newPosition;
};
const switchToBottom = (position) => switchVerticalPosition(position, 'bottom');
const switchToTop = (position) => switchVerticalPosition(position, 'top');
const switchToLeft = (position) => switchHorizontalPosition(position, 'left');
const switchToRight = (position) => switchHorizontalPosition(position, 'right');
//# sourceMappingURL=useAutoFlip.js.map