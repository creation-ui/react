export const isPositionedToTop = (position) => {
    const [positionMarker] = position.split(' ');
    return positionMarker === 'top';
};
export const isPositionedToBottom = (position) => {
    const [positionMarker] = position.split(' ');
    return positionMarker === 'bottom';
};
export const isPositionedToRight = (position) => {
    const positionMarker = position.split(' ')[1];
    return positionMarker === 'right';
};
export const isPositionedToLeft = (position) => {
    const positionMarker = position.split(' ')[1];
    return positionMarker === 'left';
};
export const fitsOnRight = (nodeRef, anchorRef) => {
    const { width: nodeWidth } = nodeRef.getBoundingClientRect();
    const { right: anchorRight } = anchorRef.getBoundingClientRect();
    return anchorRight + nodeWidth <= window.innerWidth;
};
export const fitsOnLeft = (nodeRef, anchorRef) => {
    const { width: nodeWidth } = nodeRef.getBoundingClientRect();
    const { left: anchorLeft } = anchorRef.getBoundingClientRect();
    return anchorLeft - nodeWidth >= 0;
};
export const fitsOnTop = (nodeRef, anchorRef) => {
    const { height: nodeHeight } = nodeRef.getBoundingClientRect();
    const { top: anchorTop } = anchorRef.getBoundingClientRect();
    return anchorTop - nodeHeight >= 0;
};
export const fitsOnBottom = (nodeRef, anchorRef) => {
    const { height: nodeHeight } = nodeRef.getBoundingClientRect();
    const { bottom: anchorBottom } = anchorRef.getBoundingClientRect();
    return anchorBottom + nodeHeight <= window.innerHeight;
};
//# sourceMappingURL=fit.js.map