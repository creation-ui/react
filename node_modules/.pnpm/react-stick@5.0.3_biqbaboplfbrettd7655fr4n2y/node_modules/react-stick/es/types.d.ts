import type { LegacyRef, ReactNode } from 'react';
import type { StylingProps, Substyle } from 'substyle';
export declare type VerticalTargetT = 'bottom' | 'middle' | 'top';
export declare type HorizontalTargetT = 'left' | 'center' | 'right';
export declare type PositionT = 'bottom left' | 'bottom center' | 'bottom right' | 'middle left' | 'middle center' | 'middle right' | 'top left' | 'top center' | 'top right';
export declare type AlignT = PositionT;
export declare type StickPropsT = {
    position?: PositionT;
    align?: AlignT;
    inline?: boolean;
    sameWidth?: boolean;
    autoFlipVertically?: boolean;
    autoFlipHorizontally?: boolean;
    updateOnAnimationFrame?: boolean;
    component?: string;
    transportTo?: HTMLElement;
    node?: ReactNode | null;
    children: ReactNode;
    onClickOutside?: (ev: MouseEvent) => void;
} & StylingProps & React.HTMLAttributes<HTMLElement>;
declare type SpecificStickBasePropsT = {
    children: ReactNode;
    node?: ReactNode | null;
    component?: string | null;
    style: Substyle;
    nestingKey: string;
    containerRef?: LegacyRef<HTMLElement>;
};
export declare type StickInlinePropsT = {
    position: PositionT;
    align: AlignT;
} & SpecificStickBasePropsT;
export declare type StickPortalPropsT = {
    transportTo?: HTMLElement | null;
    position: PositionT;
    updateOnAnimationFrame: boolean;
    onReposition: (nodeRef: HTMLElement) => void;
} & SpecificStickBasePropsT;
export {};
//# sourceMappingURL=types.d.ts.map