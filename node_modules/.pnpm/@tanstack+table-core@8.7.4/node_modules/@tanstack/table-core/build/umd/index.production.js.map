{"version":3,"file":"index.production.js","sources":["../../src/utils.ts","../../src/core/column.ts","../../src/core/headers.ts","../../src/features/ColumnSizing.ts","../../src/features/Expanding.ts","../../src/filterFns.ts","../../src/features/Filters.ts","../../src/aggregationFns.ts","../../src/features/Grouping.ts","../../src/features/Ordering.ts","../../src/features/Pagination.ts","../../src/features/Pinning.ts","../../src/features/RowSelection.ts","../../src/sortingFns.ts","../../src/features/Sorting.ts","../../src/features/Visibility.ts","../../src/core/table.ts","../../src/core/cell.ts","../../src/core/row.ts","../../src/utils/filterRowsUtils.ts","../../src/utils/getExpandedRowModel.ts","../../src/columnHelper.ts","../../src/utils/getCoreRowModel.ts","../../src/utils/getFacetedMinMaxValues.ts","../../src/utils/getFacetedRowModel.ts","../../src/utils/getFacetedUniqueValues.ts","../../src/utils/getFilteredRowModel.ts","../../src/utils/getGroupedRowModel.ts","../../src/utils/getPaginationRowModel.ts","../../src/utils/getSortedRowModel.ts"],"sourcesContent":["import { TableState, Updater } from './types'\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\nexport type RequiredKeys<T, K extends keyof T> = Omit<T, K> &\n  Required<Pick<T, K>>\nexport type Overwrite<T, U extends { [TKey in keyof T]?: any }> = Omit<\n  T,\n  keyof U\n> &\n  U\n\nexport type UnionToIntersection<T> = (\n  T extends any ? (x: T) => any : never\n) extends (x: infer R) => any\n  ? R\n  : never\n\nexport type IsAny<T, Y, N> = 1 extends 0 & T ? Y : N\nexport type IsKnown<T, Y, N> = unknown extends T ? N : Y\n\ntype ComputeRange<\n  N extends number,\n  Result extends Array<unknown> = []\n> = Result['length'] extends N\n  ? Result\n  : ComputeRange<N, [...Result, Result['length']]>\ntype Index40 = ComputeRange<40>[number]\n\n// Is this type a tuple?\ntype IsTuple<T> = T extends readonly any[] & { length: infer Length }\n  ? Length extends Index40\n    ? T\n    : never\n  : never\n\n// If this type is a tuple, what indices are allowed?\ntype AllowedIndexes<\n  Tuple extends ReadonlyArray<any>,\n  Keys extends number = never\n> = Tuple extends readonly []\n  ? Keys\n  : Tuple extends readonly [infer _, ...infer Tail]\n  ? AllowedIndexes<Tail, Keys | Tail['length']>\n  : Keys\n\nexport type DeepKeys<T> = unknown extends T\n  ? keyof T\n  : object extends T\n  ? string\n  : T extends readonly any[] & IsTuple<T>\n  ? AllowedIndexes<T> | DeepKeysPrefix<T, AllowedIndexes<T>>\n  : T extends any[]\n  ? never & 'Dynamic length array indexing is not supported'\n  : T extends Date\n  ? never\n  : T extends object\n  ? (keyof T & string) | DeepKeysPrefix<T, keyof T>\n  : never\n\ntype DeepKeysPrefix<T, TPrefix> = TPrefix extends keyof T & (number | string)\n  ? `${TPrefix}.${DeepKeys<T[TPrefix]> & string}`\n  : never\n\nexport type DeepValue<T, TProp> = T extends Record<string | number, any>\n  ? TProp extends `${infer TBranch}.${infer TDeepProp}`\n    ? DeepValue<T[TBranch], TDeepProp>\n    : T[TProp & string]\n  : never\n\nexport type NoInfer<T> = [T][T extends any ? 0 : never]\n\nexport type Getter<TValue> = <TTValue = TValue>() => NoInfer<TTValue>\n\n///\n\nexport function functionalUpdate<T>(updater: Updater<T>, input: T): T {\n  return typeof updater === 'function'\n    ? (updater as (input: T) => T)(input)\n    : updater\n}\n\nexport function noop() {\n  //\n}\n\nexport function makeStateUpdater<K extends keyof TableState>(\n  key: K,\n  instance: unknown\n) {\n  return (updater: Updater<TableState[K]>) => {\n    ;(instance as any).setState(<TTableState>(old: TTableState) => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, (old as any)[key]),\n      }\n    })\n  }\n}\n\ntype AnyFunction = (...args: any) => any\n\nexport function isFunction<T extends AnyFunction>(d: any): d is T {\n  return d instanceof Function\n}\n\nexport function flattenBy<TNode>(\n  arr: TNode[],\n  getChildren: (item: TNode) => TNode[]\n) {\n  const flat: TNode[] = []\n\n  const recurse = (subArr: TNode[]) => {\n    subArr.forEach(item => {\n      flat.push(item)\n      const children = getChildren(item)\n      if (children?.length) {\n        recurse(children)\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: any\n    debug?: () => any\n    onChange?: (result: TResult) => void\n  }\n): () => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return () => {\n    let depTime: number\n    if (opts.key && opts.debug) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug) resultTime = Date.now()\n\n    result = fn(...newDeps)\n    opts?.onChange?.(result)\n\n    if (opts.key && opts.debug) {\n      if (opts?.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n        const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n        const resultFpsPercentage = resultEndTime / 16\n\n        const pad = (str: number | string, num: number) => {\n          str = String(str)\n          while (str.length < num) {\n            str = ' ' + str\n          }\n          return str\n        }\n\n        console.info(\n          `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n          `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120)\n            )}deg 100% 31%);`,\n          opts?.key\n        )\n      }\n    }\n\n    return result!\n  }\n}\n","import {\n  Column,\n  Table,\n  AccessorFn,\n  ColumnDef,\n  RowData,\n  ColumnDefResolved,\n} from '../types'\nimport { memo } from '../utils'\n\nexport interface CoreColumn<TData extends RowData, TValue> {\n  id: string\n  depth: number\n  accessorFn?: AccessorFn<TData, TValue>\n  columnDef: ColumnDef<TData, TValue>\n  columns: Column<TData, TValue>[]\n  parent?: Column<TData, TValue>\n  getFlatColumns: () => Column<TData, TValue>[]\n  getLeafColumns: () => Column<TData, TValue>[]\n}\n\nexport function createColumn<TData extends RowData, TValue>(\n  table: Table<TData>,\n  columnDef: ColumnDef<TData, TValue>,\n  depth: number,\n  parent?: Column<TData, TValue>\n): Column<TData, TValue> {\n  const defaultColumn = table._getDefaultColumnDef()\n\n  const resolvedColumnDef = {\n    ...defaultColumn,\n    ...columnDef,\n  } as ColumnDefResolved<TData>\n\n  const accessorKey = resolvedColumnDef.accessorKey\n\n  let id =\n    resolvedColumnDef.id ??\n    (accessorKey ? accessorKey.replace('.', '_') : undefined) ??\n    (typeof resolvedColumnDef.header === 'string'\n      ? resolvedColumnDef.header\n      : undefined)\n\n  let accessorFn: AccessorFn<TData> | undefined\n\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn\n  } else if (accessorKey) {\n    // Support deep accessor keys\n    if (accessorKey.includes('.')) {\n      accessorFn = (originalRow: TData) => {\n        let result = originalRow as Record<string, any>\n\n        for (const key of accessorKey.split('.')) {\n          result = result[key]\n          if (process.env.NODE_ENV !== 'production' && result === undefined) {\n            throw new Error(\n              `\"${key}\" in deeply nested key \"${accessorKey}\" returned undefined.`\n            )\n          }\n        }\n\n        return result\n      }\n    } else {\n      accessorFn = (originalRow: TData) =>\n        (originalRow as any)[resolvedColumnDef.accessorKey]\n    }\n  }\n\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        resolvedColumnDef.accessorFn\n          ? `Columns require an id when using an accessorFn`\n          : `Columns require an id when using a non-string header`\n      )\n    }\n    throw new Error()\n  }\n\n  let column: CoreColumn<TData, any> = {\n    id: `${String(id)}`,\n    accessorFn,\n    parent: parent as any,\n    depth,\n    columnDef: resolvedColumnDef as ColumnDef<TData, any>,\n    columns: [],\n    getFlatColumns: memo(\n      () => [true],\n      () => {\n        return [\n          column as Column<TData, TValue>,\n          ...column.columns?.flatMap(d => d.getFlatColumns()),\n        ]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n    getLeafColumns: memo(\n      () => [table._getOrderColumnsFn()],\n      orderColumns => {\n        if (column.columns?.length) {\n          let leafColumns = column.columns.flatMap(column =>\n            column.getLeafColumns()\n          )\n\n          return orderColumns(leafColumns)\n        }\n\n        return [column as Column<TData, TValue>]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n  }\n\n  column = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.createColumn?.(column, table))\n  }, column)\n\n  // Yes, we have to convert table to uknown, because we know more than the compiler here.\n  return column as Column<TData, TValue>\n}\n","import { RowData, Column, Header, HeaderGroup, Table } from '../types'\nimport { memo } from '../utils'\nimport { TableFeature } from './table'\n\nexport interface CoreHeaderGroup<TData extends RowData> {\n  id: string\n  depth: number\n  headers: Header<TData, unknown>[]\n}\n\nexport interface HeaderContext<TData, TValue> {\n  table: Table<TData>\n  header: Header<TData, TValue>\n  column: Column<TData, TValue>\n}\n\nexport interface CoreHeader<TData extends RowData, TValue> {\n  id: string\n  index: number\n  depth: number\n  column: Column<TData, TValue>\n  headerGroup: HeaderGroup<TData>\n  subHeaders: Header<TData, TValue>[]\n  colSpan: number\n  rowSpan: number\n  getLeafHeaders: () => Header<TData, unknown>[]\n  isPlaceholder: boolean\n  placeholderId?: string\n  getContext: () => HeaderContext<TData, TValue>\n}\n\nexport interface HeadersInstance<TData extends RowData> {\n  getHeaderGroups: () => HeaderGroup<TData>[]\n  getLeftHeaderGroups: () => HeaderGroup<TData>[]\n  getCenterHeaderGroups: () => HeaderGroup<TData>[]\n  getRightHeaderGroups: () => HeaderGroup<TData>[]\n\n  getFooterGroups: () => HeaderGroup<TData>[]\n  getLeftFooterGroups: () => HeaderGroup<TData>[]\n  getCenterFooterGroups: () => HeaderGroup<TData>[]\n  getRightFooterGroups: () => HeaderGroup<TData>[]\n\n  getFlatHeaders: () => Header<TData, unknown>[]\n  getLeftFlatHeaders: () => Header<TData, unknown>[]\n  getCenterFlatHeaders: () => Header<TData, unknown>[]\n  getRightFlatHeaders: () => Header<TData, unknown>[]\n\n  getLeafHeaders: () => Header<TData, unknown>[]\n  getLeftLeafHeaders: () => Header<TData, unknown>[]\n  getCenterLeafHeaders: () => Header<TData, unknown>[]\n  getRightLeafHeaders: () => Header<TData, unknown>[]\n}\n\n//\n\nfunction createHeader<TData extends RowData, TValue>(\n  table: Table<TData>,\n  column: Column<TData, TValue>,\n  options: {\n    id?: string\n    isPlaceholder?: boolean\n    placeholderId?: string\n    index: number\n    depth: number\n  }\n): Header<TData, TValue> {\n  const id = options.id ?? column.id\n\n  let header: CoreHeader<TData, TValue> = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null!,\n    getLeafHeaders: (): Header<TData, unknown>[] => {\n      const leafHeaders: Header<TData, unknown>[] = []\n\n      const recurseHeader = (h: CoreHeader<TData, any>) => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader)\n        }\n        leafHeaders.push(h as Header<TData, unknown>)\n      }\n\n      recurseHeader(header)\n\n      return leafHeaders\n    },\n    getContext: () => ({\n      table,\n      header: header as Header<TData, TValue>,\n      column,\n    }),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(header, feature.createHeader?.(header, table))\n  })\n\n  return header as Header<TData, TValue>\n}\n\nexport const Headers: TableFeature = {\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): HeadersInstance<TData> => {\n    return {\n      // Header Groups\n\n      getHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          const leftColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const rightColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const centerColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n\n          const headerGroups = buildHeaderGroups(\n            allColumns,\n            [...leftColumns, ...centerColumns, ...rightColumns],\n            table\n          )\n\n          return headerGroups\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          leafColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n          return buildHeaderGroups(allColumns, leafColumns, table, 'center')\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n        ],\n        (allColumns, leafColumns, left) => {\n          const orderedLeafColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'left'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, right) => {\n          const orderedLeafColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'right'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Footer Groups\n\n      getFooterGroups: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFooterGroups: memo(\n        () => [table.getLeftHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFooterGroups: memo(\n        () => [table.getCenterHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFooterGroups: memo(\n        () => [table.getRightHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Flat Headers\n\n      getFlatHeaders: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return headerGroups\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFlatHeaders: memo(\n        () => [table.getLeftHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFlatHeaders: memo(\n        () => [table.getCenterHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFlatHeaders: memo(\n        () => [table.getRightHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Leaf Headers\n\n      getCenterLeafHeaders: memo(\n        () => [table.getCenterFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftLeafHeaders: memo(\n        () => [table.getLeftFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightLeafHeaders: memo(\n        () => [table.getRightFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeafHeaders: memo(\n        () => [\n          table.getLeftHeaderGroups(),\n          table.getCenterHeaderGroups(),\n          table.getRightHeaderGroups(),\n        ],\n        (left, center, right) => {\n          return [\n            ...(left[0]?.headers ?? []),\n            ...(center[0]?.headers ?? []),\n            ...(right[0]?.headers ?? []),\n          ]\n            .map(header => {\n              return header.getLeafHeaders()\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n    }\n  },\n}\n\nexport function buildHeaderGroups<TData extends RowData>(\n  allColumns: Column<TData, unknown>[],\n  columnsToGroup: Column<TData, unknown>[],\n  table: Table<TData>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (columns: Column<TData, unknown>[], depth = 1) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<TData>[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<TData, unknown>[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<TData> = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders: Header<TData, unknown>[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<TData, unknown>\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      if (\n        latestPendingParentHeader &&\n        latestPendingParentHeader?.column === column\n      ) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup)\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup?.id]\n            .filter(Boolean)\n            .join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder\n            ? `${pendingParentHeaders.filter(d => d.column === column).length}`\n            : undefined,\n          depth,\n          index: pendingParentHeaders.length,\n        })\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup)\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header)\n      }\n\n      headerGroup.headers.push(headerToGroup)\n      headerToGroup.headerGroup = headerGroup\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map((column, index) =>\n    createHeader(table, column, {\n      depth: maxDepth,\n      index,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (\n    headers: Header<TData, unknown>[]\n  ): { colSpan: number; rowSpan: number }[] => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan\n      header.rowSpan = rowSpan\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n","import { TableFeature } from '../core/table'\nimport { RowData, Column, Header, OnChangeFn, Table, Updater } from '../types'\nimport { makeStateUpdater } from '../utils'\nimport { ColumnPinningPosition } from './Pinning'\n\n//\n\nexport interface ColumnSizingTableState {\n  columnSizing: ColumnSizingState\n  columnSizingInfo: ColumnSizingInfoState\n}\n\nexport type ColumnSizingState = Record<string, number>\n\nexport interface ColumnSizingInfoState {\n  startOffset: null | number\n  startSize: null | number\n  deltaOffset: null | number\n  deltaPercentage: null | number\n  isResizingColumn: false | string\n  columnSizingStart: [string, number][]\n}\n\nexport type ColumnResizeMode = 'onChange' | 'onEnd'\n\nexport interface ColumnSizingOptions {\n  enableColumnResizing?: boolean\n  columnResizeMode?: ColumnResizeMode\n  onColumnSizingChange?: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange?: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingDefaultOptions {\n  columnResizeMode: ColumnResizeMode\n  onColumnSizingChange: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingInstance {\n  setColumnSizing: (updater: Updater<ColumnSizingState>) => void\n  setColumnSizingInfo: (updater: Updater<ColumnSizingInfoState>) => void\n  resetColumnSizing: (defaultState?: boolean) => void\n  resetHeaderSizeInfo: (defaultState?: boolean) => void\n  getTotalSize: () => number\n  getLeftTotalSize: () => number\n  getCenterTotalSize: () => number\n  getRightTotalSize: () => number\n}\n\nexport interface ColumnSizingColumnDef {\n  enableResizing?: boolean\n  size?: number\n  minSize?: number\n  maxSize?: number\n}\n\nexport interface ColumnSizingColumn {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getCanResize: () => boolean\n  getIsResizing: () => boolean\n  resetSize: () => void\n}\n\nexport interface ColumnSizingHeader {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getResizeHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER,\n}\n\nconst getDefaultColumnSizingInfoState = (): ColumnSizingInfoState => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: [],\n})\n\nexport const ColumnSizing: TableFeature = {\n  getDefaultColumnDef: (): ColumnSizingColumnDef => {\n    return defaultColumnSizing\n  },\n  getInitialState: (state): ColumnSizingTableState => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingDefaultOptions => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingColumn => {\n    return {\n      getSize: () => {\n        const columnSize = table.getState().columnSizing[column.id]\n\n        return Math.min(\n          Math.max(\n            column.columnDef.minSize ?? defaultColumnSizing.minSize,\n            columnSize ?? column.columnDef.size ?? defaultColumnSizing.size\n          ),\n          column.columnDef.maxSize ?? defaultColumnSizing.maxSize\n        )\n      },\n      getStart: position => {\n        const columns = !position\n          ? table.getVisibleLeafColumns()\n          : position === 'left'\n          ? table.getLeftVisibleLeafColumns()\n          : table.getRightVisibleLeafColumns()\n\n        const index = columns.findIndex(d => d.id === column.id)\n\n        if (index > 0) {\n          const prevSiblingColumn = columns[index - 1]!\n\n          return (\n            prevSiblingColumn.getStart(position) + prevSiblingColumn.getSize()\n          )\n        }\n\n        return 0\n      },\n      resetSize: () => {\n        table.setColumnSizing(({ [column.id]: _, ...rest }) => {\n          return rest\n        })\n      },\n      getCanResize: () => {\n        return (\n          (column.columnDef.enableResizing ?? true) &&\n          (table.options.enableColumnResizing ?? true)\n        )\n      },\n      getIsResizing: () => {\n        return table.getState().columnSizingInfo.isResizingColumn === column.id\n      },\n    }\n  },\n\n  createHeader: <TData extends RowData, TValue>(\n    header: Header<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingHeader => {\n    return {\n      getSize: () => {\n        let sum = 0\n\n        const recurse = (header: Header<TData, TValue>) => {\n          if (header.subHeaders.length) {\n            header.subHeaders.forEach(recurse)\n          } else {\n            sum += header.column.getSize() ?? 0\n          }\n        }\n\n        recurse(header)\n\n        return sum\n      },\n      getStart: () => {\n        if (header.index > 0) {\n          const prevSiblingHeader =\n            header.headerGroup.headers[header.index - 1]!\n          return prevSiblingHeader.getStart() + prevSiblingHeader.getSize()\n        }\n\n        return 0\n      },\n      getResizeHandler: () => {\n        const column = table.getColumn(header.column.id)\n        const canResize = column.getCanResize()\n\n        return (e: unknown) => {\n          if (!canResize) {\n            return\n          }\n\n          ;(e as any).persist?.()\n\n          if (isTouchStartEvent(e)) {\n            // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n            if (e.touches && e.touches.length > 1) {\n              return\n            }\n          }\n\n          const startSize = header.getSize()\n\n          const columnSizingStart: [string, number][] = header\n            ? header\n                .getLeafHeaders()\n                .map(d => [d.column.id, d.column.getSize()])\n            : [[column.id, column.getSize()]]\n\n          const clientX = isTouchStartEvent(e)\n            ? Math.round(e.touches[0]!.clientX)\n            : (e as MouseEvent).clientX\n\n          const newColumnSizing: ColumnSizingState = {}\n\n          const updateOffset = (\n            eventType: 'move' | 'end',\n            clientXPos?: number\n          ) => {\n            if (typeof clientXPos !== 'number') {\n              return\n            }\n\n            table.setColumnSizingInfo(old => {\n              const deltaOffset = clientXPos - (old?.startOffset ?? 0)\n              const deltaPercentage = Math.max(\n                deltaOffset / (old?.startSize ?? 0),\n                -0.999999\n              )\n\n              old.columnSizingStart.forEach(([columnId, headerSize]) => {\n                newColumnSizing[columnId] =\n                  Math.round(\n                    Math.max(headerSize + headerSize * deltaPercentage, 0) * 100\n                  ) / 100\n              })\n\n              return {\n                ...old,\n                deltaOffset,\n                deltaPercentage,\n              }\n            })\n\n            if (\n              table.options.columnResizeMode === 'onChange' ||\n              eventType === 'end'\n            ) {\n              table.setColumnSizing(old => ({\n                ...old,\n                ...newColumnSizing,\n              }))\n            }\n          }\n\n          const onMove = (clientXPos?: number) =>\n            updateOffset('move', clientXPos)\n\n          const onEnd = (clientXPos?: number) => {\n            updateOffset('end', clientXPos)\n\n            table.setColumnSizingInfo(old => ({\n              ...old,\n              isResizingColumn: false,\n              startOffset: null,\n              startSize: null,\n              deltaOffset: null,\n              deltaPercentage: null,\n              columnSizingStart: [],\n            }))\n          }\n\n          const mouseEvents = {\n            moveHandler: (e: MouseEvent) => onMove(e.clientX),\n            upHandler: (e: MouseEvent) => {\n              document.removeEventListener('mousemove', mouseEvents.moveHandler)\n              document.removeEventListener('mouseup', mouseEvents.upHandler)\n              onEnd(e.clientX)\n            },\n          }\n\n          const touchEvents = {\n            moveHandler: (e: TouchEvent) => {\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onMove(e.touches[0]!.clientX)\n              return false\n            },\n            upHandler: (e: TouchEvent) => {\n              document.removeEventListener('touchmove', touchEvents.moveHandler)\n              document.removeEventListener('touchend', touchEvents.upHandler)\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onEnd(e.touches[0]?.clientX)\n            },\n          }\n\n          const passiveIfSupported = passiveEventSupported()\n            ? { passive: false }\n            : false\n\n          if (isTouchStartEvent(e)) {\n            document.addEventListener(\n              'touchmove',\n              touchEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'touchend',\n              touchEvents.upHandler,\n              passiveIfSupported\n            )\n          } else {\n            document.addEventListener(\n              'mousemove',\n              mouseEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'mouseup',\n              mouseEvents.upHandler,\n              passiveIfSupported\n            )\n          }\n\n          table.setColumnSizingInfo(old => ({\n            ...old,\n            startOffset: clientX,\n            startSize,\n            deltaOffset: 0,\n            deltaPercentage: 0,\n            columnSizingStart,\n            isResizingColumn: column.id,\n          }))\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingInstance => {\n    return {\n      setColumnSizing: updater => table.options.onColumnSizingChange?.(updater),\n      setColumnSizingInfo: updater =>\n        table.options.onColumnSizingInfoChange?.(updater),\n      resetColumnSizing: defaultState => {\n        table.setColumnSizing(\n          defaultState ? {} : table.initialState.columnSizing ?? {}\n        )\n      },\n      resetHeaderSizeInfo: defaultState => {\n        table.setColumnSizingInfo(\n          defaultState\n            ? getDefaultColumnSizingInfoState()\n            : table.initialState.columnSizingInfo ??\n                getDefaultColumnSizingInfoState()\n        )\n      },\n      getTotalSize: () =>\n        table.getHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getLeftTotalSize: () =>\n        table.getLeftHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getCenterTotalSize: () =>\n        table.getCenterHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getRightTotalSize: () =>\n        table.getRightHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n    }\n  },\n}\n\nlet passiveSupported: boolean | null = null\nexport function passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    const noop = () => {}\n\n    window.addEventListener('test', noop, options)\n    window.removeEventListener('test', noop)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\nfunction isTouchStartEvent(e: unknown): e is TouchEvent {\n  return (e as TouchEvent).type === 'touchstart'\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, Updater, RowData } from '../types'\nimport { makeStateUpdater } from '../utils'\n\nexport type ExpandedStateList = Record<string, boolean>\nexport type ExpandedState = true | Record<string, boolean>\nexport interface ExpandedTableState {\n  expanded: ExpandedState\n}\n\nexport interface ExpandedRow {\n  toggleExpanded: (expanded?: boolean) => void\n  getIsExpanded: () => boolean\n  getCanExpand: () => boolean\n  getToggleExpandedHandler: () => () => void\n}\n\nexport interface ExpandedOptions<TData extends RowData> {\n  manualExpanding?: boolean\n  onExpandedChange?: OnChangeFn<ExpandedState>\n  autoResetExpanded?: boolean\n  enableExpanding?: boolean\n  getExpandedRowModel?: (table: Table<any>) => () => RowModel<any>\n  getIsRowExpanded?: (row: Row<TData>) => boolean\n  getRowCanExpand?: (row: Row<TData>) => boolean\n  paginateExpandedRows?: boolean\n}\n\nexport interface ExpandedInstance<TData extends RowData> {\n  _autoResetExpanded: () => void\n  setExpanded: (updater: Updater<ExpandedState>) => void\n  toggleAllRowsExpanded: (expanded?: boolean) => void\n  resetExpanded: (defaultState?: boolean) => void\n  getCanSomeRowsExpand: () => boolean\n  getToggleAllRowsExpandedHandler: () => (event: unknown) => void\n  getIsSomeRowsExpanded: () => boolean\n  getIsAllRowsExpanded: () => boolean\n  getExpandedDepth: () => number\n  getExpandedRowModel: () => RowModel<TData>\n  _getExpandedRowModel?: () => RowModel<TData>\n  getPreExpandedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const Expanding: TableFeature = {\n  getInitialState: (state): ExpandedTableState => {\n    return {\n      expanded: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedOptions<TData> => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetExpanded: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetExpanded ??\n          !table.options.manualExpanding\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetExpanded()\n            queued = false\n          })\n        }\n      },\n      setExpanded: updater => table.options.onExpandedChange?.(updater),\n      toggleAllRowsExpanded: expanded => {\n        if (expanded ?? !table.getIsAllRowsExpanded()) {\n          table.setExpanded(true)\n        } else {\n          table.setExpanded({})\n        }\n      },\n      resetExpanded: defaultState => {\n        table.setExpanded(\n          defaultState ? {} : table.initialState?.expanded ?? {}\n        )\n      },\n      getCanSomeRowsExpand: () => {\n        return table.getRowModel().flatRows.some(row => row.getCanExpand())\n      },\n      getToggleAllRowsExpandedHandler: () => {\n        return (e: unknown) => {\n          ;(e as any).persist?.()\n          table.toggleAllRowsExpanded()\n        }\n      },\n      getIsSomeRowsExpanded: () => {\n        const expanded = table.getState().expanded\n        return expanded === true || Object.values(expanded).some(Boolean)\n      },\n      getIsAllRowsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        // If expanded is true, save some cycles and return true\n        if (typeof expanded === 'boolean') {\n          return expanded === true\n        }\n\n        if (!Object.keys(expanded).length) {\n          return false\n        }\n\n        // If any row is not expanded, return false\n        if (table.getRowModel().flatRows.some(row => !row.getIsExpanded())) {\n          return false\n        }\n\n        // They must all be expanded :shrug:\n        return true\n      },\n      getExpandedDepth: () => {\n        let maxDepth = 0\n\n        const rowIds =\n          table.getState().expanded === true\n            ? Object.keys(table.getRowModel().rowsById)\n            : Object.keys(table.getState().expanded)\n\n        rowIds.forEach(id => {\n          const splitId = id.split('.')\n          maxDepth = Math.max(maxDepth, splitId.length)\n        })\n\n        return maxDepth\n      },\n      getPreExpandedRowModel: () => table.getSortedRowModel(),\n      getExpandedRowModel: () => {\n        if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n          table._getExpandedRowModel = table.options.getExpandedRowModel(table)\n        }\n\n        if (table.options.manualExpanding || !table._getExpandedRowModel) {\n          return table.getPreExpandedRowModel()\n        }\n\n        return table._getExpandedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ExpandedRow => {\n    return {\n      toggleExpanded: expanded => {\n        table.setExpanded(old => {\n          const exists = old === true ? true : !!old?.[row.id]\n\n          let oldExpanded: ExpandedStateList = {}\n\n          if (old === true) {\n            Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n              oldExpanded[rowId] = true\n            })\n          } else {\n            oldExpanded = old\n          }\n\n          expanded = expanded ?? !exists\n\n          if (!exists && expanded) {\n            return {\n              ...oldExpanded,\n              [row.id]: true,\n            }\n          }\n\n          if (exists && !expanded) {\n            const { [row.id]: _, ...rest } = oldExpanded\n            return rest\n          }\n\n          return old\n        })\n      },\n      getIsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        return !!(\n          table.options.getIsRowExpanded?.(row) ??\n          (expanded === true || expanded?.[row.id])\n        )\n      },\n      getCanExpand: () => {\n        return (\n          table.options.getRowCanExpand?.(row) ??\n          ((table.options.enableExpanding ?? true) && !!row.subRows?.length)\n        )\n      },\n      getToggleExpandedHandler: () => {\n        const canExpand = row.getCanExpand()\n\n        return () => {\n          if (!canExpand) return\n          row.toggleExpanded()\n        }\n      },\n    }\n  },\n}\n","import { FilterFn } from './features/Filters'\n\nconst includesString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  const search = filterValue.toLowerCase()\n  return Boolean(row.getValue<string>(columnId)?.toLowerCase().includes(search))\n}\n\nincludesString.autoRemove = (val: any) => testFalsey(val)\n\nconst includesStringSensitive: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return Boolean(row.getValue<string>(columnId)?.includes(filterValue))\n}\n\nincludesStringSensitive.autoRemove = (val: any) => testFalsey(val)\n\nconst equalsString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return (\n    row.getValue<string>(columnId)?.toLowerCase() === filterValue.toLowerCase()\n  )\n}\n\nequalsString.autoRemove = (val: any) => testFalsey(val)\n\nconst arrIncludes: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue<unknown[]>(columnId)?.includes(filterValue)\n}\n\narrIncludes.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesAll: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return !filterValue.some(\n    val => !row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesAll.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesSome: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return filterValue.some(val =>\n    row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesSome.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst equals: FilterFn<any> = (row, columnId: string, filterValue: unknown) => {\n  return row.getValue(columnId) === filterValue\n}\n\nequals.autoRemove = (val: any) => testFalsey(val)\n\nconst weakEquals: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue(columnId) == filterValue\n}\n\nweakEquals.autoRemove = (val: any) => testFalsey(val)\n\nconst inNumberRange: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: [number, number]\n) => {\n  let [min, max] = filterValue\n\n  const rowValue = row.getValue<number>(columnId)\n  return rowValue >= min && rowValue <= max\n}\n\ninNumberRange.resolveFilterValue = (val: [any, any]) => {\n  let [unsafeMin, unsafeMax] = val\n\n  let parsedMin =\n    typeof unsafeMin !== 'number' ? parseFloat(unsafeMin as string) : unsafeMin\n  let parsedMax =\n    typeof unsafeMax !== 'number' ? parseFloat(unsafeMax as string) : unsafeMax\n\n  let min =\n    unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return [min, max] as const\n}\n\ninNumberRange.autoRemove = (val: any) =>\n  testFalsey(val) || (testFalsey(val[0]) && testFalsey(val[1]))\n\n// Export\n\nexport const filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange,\n}\n\nexport type BuiltInFilterFn = keyof typeof filterFns\n\n// Utils\n\nfunction testFalsey(val: any) {\n  return val === undefined || val === null || val === ''\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { BuiltInFilterFn, filterFns } from '../filterFns'\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  FilterMeta,\n  FilterFns,\n} from '../types'\nimport { functionalUpdate, isFunction, makeStateUpdater } from '../utils'\n\nexport interface FiltersTableState {\n  columnFilters: ColumnFiltersState\n  globalFilter: any\n}\n\nexport type ColumnFiltersState = ColumnFilter[]\n\nexport interface ColumnFilter {\n  id: string\n  value: unknown\n}\n\nexport interface ResolvedColumnFilter<TData extends RowData> {\n  id: string\n  resolvedValue: unknown\n  filterFn: FilterFn<TData>\n}\n\nexport interface FilterFn<TData extends RowData> {\n  (\n    row: Row<TData>,\n    columnId: string,\n    filterValue: any,\n    addMeta: (meta: FilterMeta) => void\n  ): boolean\n\n  resolveFilterValue?: TransformFilterValueFn<TData>\n  autoRemove?: ColumnFilterAutoRemoveTestFn<TData>\n}\n\nexport type TransformFilterValueFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => unknown\n\nexport type ColumnFilterAutoRemoveTestFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => boolean\n\nexport type CustomFilterFns<TData extends RowData> = Record<\n  string,\n  FilterFn<TData>\n>\n\nexport type FilterFnOption<TData extends RowData> =\n  | 'auto'\n  | BuiltInFilterFn\n  | keyof FilterFns\n  | FilterFn<TData>\n\nexport interface FiltersColumnDef<TData extends RowData> {\n  filterFn?: FilterFnOption<TData>\n  enableColumnFilter?: boolean\n  enableGlobalFilter?: boolean\n}\n\nexport interface FiltersColumn<TData extends RowData> {\n  getAutoFilterFn: () => FilterFn<TData> | undefined\n  getFilterFn: () => FilterFn<TData> | undefined\n  setFilterValue: (updater: Updater<any>) => void\n  getCanFilter: () => boolean\n  getCanGlobalFilter: () => boolean\n  getFacetedRowModel: () => RowModel<TData>\n  _getFacetedRowModel?: () => RowModel<TData>\n  getIsFiltered: () => boolean\n  getFilterValue: () => unknown\n  getFilterIndex: () => number\n  getFacetedUniqueValues: () => Map<any, number>\n  _getFacetedUniqueValues?: () => Map<any, number>\n  getFacetedMinMaxValues: () => undefined | [number, number]\n  _getFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\nexport interface FiltersRow<TData extends RowData> {\n  columnFilters: Record<string, boolean>\n  columnFiltersMeta: Record<string, FilterMeta>\n}\n\ninterface FiltersOptionsBase<TData extends RowData> {\n  enableFilters?: boolean\n  manualFiltering?: boolean\n  filterFromLeafRows?: boolean\n  maxLeafRowFilterDepth?: number\n  getFilteredRowModel?: (table: Table<any>) => () => RowModel<any>\n\n  // Column\n  onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\n  enableColumnFilters?: boolean\n\n  // Global\n  globalFilterFn?: FilterFnOption<TData>\n  onGlobalFilterChange?: OnChangeFn<any>\n  enableGlobalFilter?: boolean\n  getColumnCanGlobalFilter?: (column: Column<TData, unknown>) => boolean\n\n  // Faceting\n  getFacetedRowModel?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => RowModel<TData>\n  getFacetedUniqueValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => Map<any, number>\n  getFacetedMinMaxValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => undefined | [number, number]\n}\n\ntype ResolvedFilterFns = keyof FilterFns extends never\n  ? {\n      filterFns?: Record<string, FilterFn<any>>\n    }\n  : {\n      filterFns: Record<keyof FilterFns, FilterFn<any>>\n    }\n\nexport interface FiltersOptions<TData extends RowData>\n  extends FiltersOptionsBase<TData>,\n    ResolvedFilterFns {}\n\nexport interface FiltersInstance<TData extends RowData> {\n  setColumnFilters: (updater: Updater<ColumnFiltersState>) => void\n\n  resetColumnFilters: (defaultState?: boolean) => void\n\n  // Column Filters\n  getPreFilteredRowModel: () => RowModel<TData>\n  getFilteredRowModel: () => RowModel<TData>\n  _getFilteredRowModel?: () => RowModel<TData>\n\n  // Global Filters\n  setGlobalFilter: (updater: Updater<any>) => void\n  resetGlobalFilter: (defaultState?: boolean) => void\n  getGlobalAutoFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFacetedRowModel: () => RowModel<TData>\n  _getGlobalFacetedRowModel?: () => RowModel<TData>\n  getGlobalFacetedUniqueValues: () => Map<any, number>\n  _getGlobalFacetedUniqueValues?: () => Map<any, number>\n  getGlobalFacetedMinMaxValues: () => undefined | [number, number]\n  _getGlobalFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\n//\n\nexport const Filters: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): FiltersColumnDef<TData> => {\n    return {\n      filterFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): FiltersTableState => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n      // filtersProgress: 1,\n      // facetProgress: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersOptions<TData> => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      filterFromLeafRows: false,\n      maxLeafRowFilterDepth: 100,\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        const value = table\n          .getCoreRowModel()\n          .flatRows[0]?._getAllCellsByColumnId()\n          [column.id]?.getValue()\n\n        return typeof value === 'string' || typeof value === 'number'\n      },\n    } as FiltersOptions<TData>\n  },\n\n  createColumn: <TData extends RowData>(\n    column: Column<TData, unknown>,\n    table: Table<TData>\n  ): FiltersColumn<TData> => {\n    return {\n      getAutoFilterFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return filterFns.includesString\n        }\n\n        if (typeof value === 'number') {\n          return filterFns.inNumberRange\n        }\n\n        if (typeof value === 'boolean') {\n          return filterFns.equals\n        }\n\n        if (value !== null && typeof value === 'object') {\n          return filterFns.equals\n        }\n\n        if (Array.isArray(value)) {\n          return filterFns.arrIncludes\n        }\n\n        return filterFns.weakEquals\n      },\n      getFilterFn: () => {\n        return isFunction(column.columnDef.filterFn)\n          ? column.columnDef.filterFn\n          : column.columnDef.filterFn === 'auto'\n          ? column.getAutoFilterFn()\n          // @ts-ignore \n          : table.options.filterFns?.[column.columnDef.filterFn as string] ??\n            filterFns[column.columnDef.filterFn as BuiltInFilterFn]\n      },\n      getCanFilter: () => {\n        return (\n          (column.columnDef.enableColumnFilter ?? true) &&\n          (table.options.enableColumnFilters ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanGlobalFilter: () => {\n        return (\n          (column.columnDef.enableGlobalFilter ?? true) &&\n          (table.options.enableGlobalFilter ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          (table.options.getColumnCanGlobalFilter?.(column) ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getIsFiltered: () => column.getFilterIndex() > -1,\n\n      getFilterValue: () =>\n        table.getState().columnFilters?.find(d => d.id === column.id)?.value,\n\n      getFilterIndex: () =>\n        table.getState().columnFilters?.findIndex(d => d.id === column.id) ??\n        -1,\n\n      setFilterValue: value => {\n        table.setColumnFilters(old => {\n          const filterFn = column.getFilterFn()\n          const previousfilter = old?.find(d => d.id === column.id)\n\n          const newFilter = functionalUpdate(\n            value,\n            previousfilter ? previousfilter.value : undefined\n          )\n\n          //\n          if (\n            shouldAutoRemoveFilter(\n              filterFn as FilterFn<TData>,\n              newFilter,\n              column\n            )\n          ) {\n            return old?.filter(d => d.id !== column.id) ?? []\n          }\n\n          const newFilterObj = { id: column.id, value: newFilter }\n\n          if (previousfilter) {\n            return (\n              old?.map(d => {\n                if (d.id === column.id) {\n                  return newFilterObj\n                }\n                return d\n              }) ?? []\n            )\n          }\n\n          if (old?.length) {\n            return [...old, newFilterObj]\n          }\n\n          return [newFilterObj]\n        })\n      },\n      _getFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, column.id),\n      getFacetedRowModel: () => {\n        if (!column._getFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return column._getFacetedRowModel()\n      },\n      _getFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, column.id),\n      getFacetedUniqueValues: () => {\n        if (!column._getFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return column._getFacetedUniqueValues()\n      },\n      _getFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, column.id),\n      getFacetedMinMaxValues: () => {\n        if (!column._getFacetedMinMaxValues) {\n          return undefined\n        }\n\n        return column._getFacetedMinMaxValues()\n      },\n      // () => [column.getFacetedRowModel()],\n      // facetedRowModel => getRowModelMinMaxValues(facetedRowModel, column.id),\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): FiltersRow<TData> => {\n    return {\n      columnFilters: {},\n      columnFiltersMeta: {},\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersInstance<TData> => {\n    return {\n      getGlobalAutoFilterFn: () => {\n        return filterFns.includesString\n      },\n\n      getGlobalFilterFn: () => {\n        const { globalFilterFn: globalFilterFn } = table.options\n\n        return isFunction(globalFilterFn)\n          ? globalFilterFn\n          : globalFilterFn === 'auto'\n          ? table.getGlobalAutoFilterFn()\n          // @ts-ignore\n          : table.options.filterFns?.[globalFilterFn as string] ??\n            filterFns[globalFilterFn as BuiltInFilterFn]\n      },\n\n      setColumnFilters: (updater: Updater<ColumnFiltersState>) => {\n        const leafColumns = table.getAllLeafColumns()\n\n        const updateFn = (old: ColumnFiltersState) => {\n          return functionalUpdate(updater, old)?.filter(filter => {\n            const column = leafColumns.find(d => d.id === filter.id)\n\n            if (column) {\n              const filterFn = column.getFilterFn()\n\n              if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n                return false\n              }\n            }\n\n            return true\n          })\n        }\n\n        table.options.onColumnFiltersChange?.(updateFn)\n      },\n\n      setGlobalFilter: updater => {\n        table.options.onGlobalFilterChange?.(updater)\n      },\n\n      resetGlobalFilter: defaultState => {\n        table.setGlobalFilter(\n          defaultState ? undefined : table.initialState.globalFilter\n        )\n      },\n\n      resetColumnFilters: defaultState => {\n        table.setColumnFilters(\n          defaultState ? [] : table.initialState?.columnFilters ?? []\n        )\n      },\n\n      getPreFilteredRowModel: () => table.getCoreRowModel(),\n      getFilteredRowModel: () => {\n        if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {\n          table._getFilteredRowModel = table.options.getFilteredRowModel(table)\n        }\n\n        if (table.options.manualFiltering || !table._getFilteredRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getFilteredRowModel()\n      },\n\n      _getGlobalFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, '__global__'),\n\n      getGlobalFacetedRowModel: () => {\n        if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getGlobalFacetedRowModel()\n      },\n\n      _getGlobalFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, '__global__'),\n      getGlobalFacetedUniqueValues: () => {\n        if (!table._getGlobalFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return table._getGlobalFacetedUniqueValues()\n      },\n\n      _getGlobalFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, '__global__'),\n      getGlobalFacetedMinMaxValues: () => {\n        if (!table._getGlobalFacetedMinMaxValues) {\n          return\n        }\n\n        return table._getGlobalFacetedMinMaxValues()\n      },\n    }\n  },\n}\n\nexport function shouldAutoRemoveFilter<TData extends RowData>(\n  filterFn?: FilterFn<TData>,\n  value?: any,\n  column?: Column<TData, unknown>\n) {\n  return (\n    (filterFn && filterFn.autoRemove\n      ? filterFn.autoRemove(value, column)\n      : false) ||\n    typeof value === 'undefined' ||\n    (typeof value === 'string' && !value)\n  )\n}\n","import { AggregationFn } from './features/Grouping'\n\nconst sum: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId)\n    return sum + (typeof nextValue === 'number' ? nextValue : 0)\n  }, 0)\n}\n\nconst min: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n\n    if (\n      value != null &&\n      (min! > value || (min === undefined && value >= value))\n    ) {\n      min = value\n    }\n  })\n\n  return min\n}\n\nconst max: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (\n      value != null &&\n      (max! < value || (max === undefined && value >= value))\n    ) {\n      max = value\n    }\n  })\n\n  return max\n}\n\nconst extent: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value\n      } else {\n        if (min > value) min = value\n        if (max! < value) max = value\n      }\n    }\n  })\n\n  return [min, max]\n}\n\nconst mean: AggregationFn<any> = (columnId, leafRows) => {\n  let count = 0\n  let sum = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue<number>(columnId)\n    if (value != null && (value = +value) >= value) {\n      ++count, (sum += value)\n    }\n  })\n\n  if (count) return sum / count\n\n  return\n}\n\nconst median: AggregationFn<any> = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return\n  }\n\n  let min = 0\n  let max = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue(columnId)\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return (min + max) / 2\n}\n\nconst unique: AggregationFn<any> = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values())\n}\n\nconst uniqueCount: AggregationFn<any> = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size\n}\n\nconst count: AggregationFn<any> = (_columnId, leafRows) => {\n  return leafRows.length\n}\n\nexport const aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count,\n}\n\nexport type BuiltInAggregationFn = keyof typeof aggregationFns\n","import { RowModel } from '..'\nimport { BuiltInAggregationFn, aggregationFns } from '../aggregationFns'\nimport { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  ColumnDefTemplate,\n  RowData,\n  AggregationFns,\n} from '../types'\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type GroupingState = string[]\n\nexport interface GroupingTableState {\n  grouping: GroupingState\n}\n\nexport type AggregationFn<TData extends RowData> = (\n  columnId: string,\n  leafRows: Row<TData>[],\n  childRows: Row<TData>[]\n) => any\n\nexport type CustomAggregationFns = Record<string, AggregationFn<any>>\n\nexport type AggregationFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof AggregationFns\n  | BuiltInAggregationFn\n  | AggregationFn<TData>\n\nexport interface GroupingColumnDef<TData extends RowData, TValue> {\n  aggregationFn?: AggregationFnOption<TData>\n  aggregatedCell?: ColumnDefTemplate<\n    ReturnType<Cell<TData, TValue>['getContext']>\n  >\n  enableGrouping?: boolean\n}\n\nexport interface GroupingColumn<TData extends RowData> {\n  getCanGroup: () => boolean\n  getIsGrouped: () => boolean\n  getGroupedIndex: () => number\n  toggleGrouping: () => void\n  getToggleGroupingHandler: () => () => void\n  getAutoAggregationFn: () => AggregationFn<TData> | undefined\n  getAggregationFn: () => AggregationFn<TData> | undefined\n}\n\nexport interface GroupingRow {\n  groupingColumnId?: string\n  groupingValue?: unknown\n  getIsGrouped: () => boolean\n  _groupingValuesCache: Record<string, any>\n}\n\nexport interface GroupingCell {\n  getIsGrouped: () => boolean\n  getIsPlaceholder: () => boolean\n  getIsAggregated: () => boolean\n}\n\nexport interface ColumnDefaultOptions {\n  // Column\n  onGroupingChange: OnChangeFn<GroupingState>\n  enableGrouping: boolean\n}\n\ninterface GroupingOptionsBase {\n  manualGrouping?: boolean\n  onGroupingChange?: OnChangeFn<GroupingState>\n  enableGrouping?: boolean\n  getGroupedRowModel?: (table: Table<any>) => () => RowModel<any>\n  groupedColumnMode?: false | 'reorder' | 'remove'\n}\n\ntype ResolvedAggregationFns = keyof AggregationFns extends never\n  ? {\n      aggregationFns?: Record<string, AggregationFn<any>>\n    }\n  : {\n      aggregationFns: Record<keyof AggregationFns, AggregationFn<any>>\n    }\n\nexport interface GroupingOptions\n  extends GroupingOptionsBase,\n    ResolvedAggregationFns {}\n\nexport type GroupingColumnMode = false | 'reorder' | 'remove'\n\nexport interface GroupingInstance<TData extends RowData> {\n  setGrouping: (updater: Updater<GroupingState>) => void\n  resetGrouping: (defaultState?: boolean) => void\n  getPreGroupedRowModel: () => RowModel<TData>\n  getGroupedRowModel: () => RowModel<TData>\n  _getGroupedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Grouping: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): GroupingColumnDef<\n    TData,\n    unknown\n  > => {\n    return {\n      aggregatedCell: props => (props.getValue() as any)?.toString?.() ?? null,\n      aggregationFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): GroupingTableState => {\n    return {\n      grouping: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingOptions => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder',\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): GroupingColumn<TData> => {\n    return {\n      toggleGrouping: () => {\n        table.setGrouping(old => {\n          // Find any existing grouping for this column\n          if (old?.includes(column.id)) {\n            return old.filter(d => d !== column.id)\n          }\n\n          return [...(old ?? []), column.id]\n        })\n      },\n\n      getCanGroup: () => {\n        return (\n          column.columnDef.enableGrouping ??\n          true ??\n          table.options.enableGrouping ??\n          true ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsGrouped: () => {\n        return table.getState().grouping?.includes(column.id)\n      },\n\n      getGroupedIndex: () => table.getState().grouping?.indexOf(column.id),\n\n      getToggleGroupingHandler: () => {\n        const canGroup = column.getCanGroup()\n\n        return () => {\n          if (!canGroup) return\n          column.toggleGrouping()\n        }\n      },\n      getAutoAggregationFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'number') {\n          return aggregationFns.sum\n        }\n\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return aggregationFns.extent\n        }\n      },\n      getAggregationFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.aggregationFn)\n          ? column.columnDef.aggregationFn\n          : column.columnDef.aggregationFn === 'auto'\n          ? column.getAutoAggregationFn()\n          : table.options.aggregationFns?.[\n              column.columnDef.aggregationFn as string\n            ] ??\n            aggregationFns[\n              column.columnDef.aggregationFn as BuiltInAggregationFn\n            ]\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingInstance<TData> => {\n    return {\n      setGrouping: updater => table.options.onGroupingChange?.(updater),\n\n      resetGrouping: defaultState => {\n        table.setGrouping(\n          defaultState ? [] : table.initialState?.grouping ?? []\n        )\n      },\n\n      getPreGroupedRowModel: () => table.getFilteredRowModel(),\n      getGroupedRowModel: () => {\n        if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n          table._getGroupedRowModel = table.options.getGroupedRowModel(table)\n        }\n\n        if (table.options.manualGrouping || !table._getGroupedRowModel) {\n          return table.getPreGroupedRowModel()\n        }\n\n        return table._getGroupedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(row: Row<TData>): GroupingRow => {\n    return {\n      getIsGrouped: () => !!row.groupingColumnId,\n      _groupingValuesCache: {},\n    }\n  },\n\n  createCell: <TData extends RowData, TValue>(\n    cell: Cell<TData, TValue>,\n    column: Column<TData, TValue>,\n    row: Row<TData>,\n    table: Table<TData>\n  ): GroupingCell => {\n    const getRenderValue = () =>\n      cell.getValue() ?? table.options.renderFallbackValue\n\n    return {\n      getIsGrouped: () =>\n        column.getIsGrouped() && column.id === row.groupingColumnId,\n      getIsPlaceholder: () => !cell.getIsGrouped() && column.getIsGrouped(),\n      getIsAggregated: () =>\n        !cell.getIsGrouped() &&\n        !cell.getIsPlaceholder() &&\n        !!row.subRows?.length,\n    }\n  },\n}\n\nexport function orderColumns<TData extends RowData>(\n  leafColumns: Column<TData, unknown>[],\n  grouping: string[],\n  groupedColumnMode?: GroupingColumnMode\n) {\n  if (!grouping?.length || !groupedColumnMode) {\n    return leafColumns\n  }\n\n  const nonGroupingColumns = leafColumns.filter(\n    col => !grouping.includes(col.id)\n  )\n\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns\n  }\n\n  const groupingColumns = grouping\n    .map(g => leafColumns.find(col => col.id === g)!)\n    .filter(Boolean)\n\n  return [...groupingColumns, ...nonGroupingColumns]\n}\n","import { makeStateUpdater, memo } from '../utils'\n\nimport { Table, OnChangeFn, Updater, Column, RowData } from '../types'\n\nimport { orderColumns } from './Grouping'\nimport { TableFeature } from '../core/table'\n\nexport interface ColumnOrderTableState {\n  columnOrder: ColumnOrderState\n}\n\nexport type ColumnOrderState = string[]\n\nexport interface ColumnOrderOptions {\n  onColumnOrderChange?: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderDefaultOptions {\n  onColumnOrderChange: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderInstance<TData extends RowData> {\n  setColumnOrder: (updater: Updater<ColumnOrderState>) => void\n  resetColumnOrder: (defaultState?: boolean) => void\n  _getOrderColumnsFn: () => (\n    columns: Column<TData, unknown>[]\n  ) => Column<TData, unknown>[]\n}\n\n//\n\nexport const Ordering: TableFeature = {\n  getInitialState: (state): ColumnOrderTableState => {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderDefaultOptions => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderInstance<TData> => {\n    return {\n      setColumnOrder: updater => table.options.onColumnOrderChange?.(updater),\n      resetColumnOrder: defaultState => {\n        table.setColumnOrder(\n          defaultState ? [] : table.initialState.columnOrder ?? []\n        )\n      },\n      _getOrderColumnsFn: memo(\n        () => [\n          table.getState().columnOrder,\n          table.getState().grouping,\n          table.options.groupedColumnMode,\n        ],\n        (columnOrder, grouping, groupedColumnMode) => columns => {\n          // Sort grouped columns to the start of the column list\n          // before the headers are built\n          let orderedColumns: Column<TData, unknown>[] = []\n\n          // If there is no order, return the normal columns\n          if (!columnOrder?.length) {\n            orderedColumns = columns\n          } else {\n            const columnOrderCopy = [...columnOrder]\n\n            // If there is an order, make a copy of the columns\n            const columnsCopy = [...columns]\n\n            // And make a new ordered array of the columns\n\n            // Loop over the columns and place them in order into the new array\n            while (columnsCopy.length && columnOrderCopy.length) {\n              const targetColumnId = columnOrderCopy.shift()\n              const foundIndex = columnsCopy.findIndex(\n                d => d.id === targetColumnId\n              )\n              if (foundIndex > -1) {\n                orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]!)\n              }\n            }\n\n            // If there are any columns left, add them to the end\n            orderedColumns = [...orderedColumns, ...columnsCopy]\n          }\n\n          return orderColumns(orderedColumns, grouping, groupedColumnMode)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getOrderColumnsFn',\n          // debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, RowModel, Updater, RowData } from '../types'\nimport { functionalUpdate, makeStateUpdater, memo } from '../utils'\n\nexport interface PaginationState {\n  pageIndex: number\n  pageSize: number\n}\n\nexport interface PaginationTableState {\n  pagination: PaginationState\n}\n\nexport interface PaginationInitialTableState {\n  pagination?: Partial<PaginationState>\n}\n\nexport interface PaginationOptions {\n  pageCount?: number\n  manualPagination?: boolean\n  onPaginationChange?: OnChangeFn<PaginationState>\n  autoResetPageIndex?: boolean\n  getPaginationRowModel?: (table: Table<any>) => () => RowModel<any>\n}\n\nexport interface PaginationDefaultOptions {\n  onPaginationChange: OnChangeFn<PaginationState>\n}\n\nexport interface PaginationInstance<TData extends RowData> {\n  _autoResetPageIndex: () => void\n  setPagination: (updater: Updater<PaginationState>) => void\n  resetPagination: (defaultState?: boolean) => void\n  setPageIndex: (updater: Updater<number>) => void\n  resetPageIndex: (defaultState?: boolean) => void\n  setPageSize: (updater: Updater<number>) => void\n  resetPageSize: (defaultState?: boolean) => void\n  setPageCount: (updater: Updater<number>) => void\n  getPageOptions: () => number[]\n  getCanPreviousPage: () => boolean\n  getCanNextPage: () => boolean\n  previousPage: () => void\n  nextPage: () => void\n  getPrePaginationRowModel: () => RowModel<TData>\n  getPaginationRowModel: () => RowModel<TData>\n  _getPaginationRowModel?: () => RowModel<TData>\n  getPageCount: () => number\n}\n\n//\n\nconst defaultPageIndex = 0\nconst defaultPageSize = 10\n\nconst getDefaultPaginationState = (): PaginationState => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize,\n})\n\nexport const Pagination: TableFeature = {\n  getInitialState: (state): PaginationTableState => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...state?.pagination,\n      },\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationDefaultOptions => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetPageIndex: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetPageIndex ??\n          !table.options.manualPagination\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetPageIndex()\n            queued = false\n          })\n        }\n      },\n      setPagination: updater => {\n        const safeUpdater: Updater<PaginationState> = old => {\n          let newState = functionalUpdate(updater, old)\n\n          return newState\n        }\n\n        return table.options.onPaginationChange?.(safeUpdater)\n      },\n      resetPagination: defaultState => {\n        table.setPagination(\n          defaultState\n            ? getDefaultPaginationState()\n            : table.initialState.pagination ?? getDefaultPaginationState()\n        )\n      },\n      setPageIndex: updater => {\n        table.setPagination(old => {\n          let pageIndex = functionalUpdate(updater, old.pageIndex)\n\n          const maxPageIndex =\n            typeof table.options.pageCount === 'undefined' ||\n            table.options.pageCount === -1\n              ? Number.MAX_SAFE_INTEGER\n              : table.options.pageCount - 1\n\n          pageIndex = Math.max(0, Math.min(pageIndex, maxPageIndex))\n\n          return {\n            ...old,\n            pageIndex,\n          }\n        })\n      },\n      resetPageIndex: defaultState => {\n        table.setPageIndex(\n          defaultState\n            ? defaultPageIndex\n            : table.initialState?.pagination?.pageIndex ?? defaultPageIndex\n        )\n      },\n      resetPageSize: defaultState => {\n        table.setPageSize(\n          defaultState\n            ? defaultPageSize\n            : table.initialState?.pagination?.pageSize ?? defaultPageSize\n        )\n      },\n      setPageSize: updater => {\n        table.setPagination(old => {\n          const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize))\n          const topRowIndex = old.pageSize * old.pageIndex!\n          const pageIndex = Math.floor(topRowIndex / pageSize)\n\n          return {\n            ...old,\n            pageIndex,\n            pageSize,\n          }\n        })\n      },\n      setPageCount: updater =>\n        table.setPagination(old => {\n          let newPageCount = functionalUpdate(\n            updater,\n            table.options.pageCount ?? -1\n          )\n\n          if (typeof newPageCount === 'number') {\n            newPageCount = Math.max(-1, newPageCount)\n          }\n\n          return {\n            ...old,\n            pageCount: newPageCount,\n          }\n        }),\n\n      getPageOptions: memo(\n        () => [table.getPageCount()],\n        pageCount => {\n          let pageOptions: number[] = []\n          if (pageCount && pageCount > 0) {\n            pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i)\n          }\n          return pageOptions\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getPageOptions',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getCanPreviousPage: () => table.getState().pagination.pageIndex > 0,\n\n      getCanNextPage: () => {\n        const { pageIndex } = table.getState().pagination\n\n        const pageCount = table.getPageCount()\n\n        if (pageCount === -1) {\n          return true\n        }\n\n        if (pageCount === 0) {\n          return false\n        }\n\n        return pageIndex < pageCount - 1\n      },\n\n      previousPage: () => {\n        return table.setPageIndex(old => old - 1)\n      },\n\n      nextPage: () => {\n        return table.setPageIndex(old => {\n          return old + 1\n        })\n      },\n\n      getPrePaginationRowModel: () => table.getExpandedRowModel(),\n      getPaginationRowModel: () => {\n        if (\n          !table._getPaginationRowModel &&\n          table.options.getPaginationRowModel\n        ) {\n          table._getPaginationRowModel =\n            table.options.getPaginationRowModel(table)\n        }\n\n        if (table.options.manualPagination || !table._getPaginationRowModel) {\n          return table.getPrePaginationRowModel()\n        }\n\n        return table._getPaginationRowModel()\n      },\n\n      getPageCount: () => {\n        return (\n          table.options.pageCount ??\n          Math.ceil(\n            table.getPrePaginationRowModel().rows.length /\n              table.getState().pagination.pageSize\n          )\n        )\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  OnChangeFn,\n  Updater,\n  Table,\n  Column,\n  Row,\n  Cell,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type ColumnPinningPosition = false | 'left' | 'right'\n\nexport interface ColumnPinningState {\n  left?: string[]\n  right?: string[]\n}\n\nexport interface ColumnPinningTableState {\n  columnPinning: ColumnPinningState\n}\n\nexport interface ColumnPinningOptions {\n  onColumnPinningChange?: OnChangeFn<ColumnPinningState>\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningDefaultOptions {\n  onColumnPinningChange: OnChangeFn<ColumnPinningState>\n}\n\nexport interface ColumnPinningColumnDef {\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningColumn {\n  getCanPin: () => boolean\n  getPinnedIndex: () => number\n  getIsPinned: () => ColumnPinningPosition\n  pin: (position: ColumnPinningPosition) => void\n}\n\nexport interface ColumnPinningRow<TData extends RowData> {\n  getLeftVisibleCells: () => Cell<TData, unknown>[]\n  getCenterVisibleCells: () => Cell<TData, unknown>[]\n  getRightVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface ColumnPinningInstance<TData extends RowData> {\n  setColumnPinning: (updater: Updater<ColumnPinningState>) => void\n  resetColumnPinning: (defaultState?: boolean) => void\n  getIsSomeColumnsPinned: (position?: ColumnPinningPosition) => boolean\n  getLeftLeafColumns: () => Column<TData, unknown>[]\n  getRightLeafColumns: () => Column<TData, unknown>[]\n  getCenterLeafColumns: () => Column<TData, unknown>[]\n}\n\n//\n\nconst getDefaultPinningState = (): ColumnPinningState => ({\n  left: [],\n  right: [],\n})\n\nexport const Pinning: TableFeature = {\n  getInitialState: (state): ColumnPinningTableState => {\n    return {\n      columnPinning: getDefaultPinningState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningDefaultOptions => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnPinningColumn => {\n    return {\n      pin: position => {\n        const columnIds = column\n          .getLeafColumns()\n          .map(d => d.id)\n          .filter(Boolean) as string[]\n\n        table.setColumnPinning(old => {\n          if (position === 'right') {\n            return {\n              left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n              right: [\n                ...(old?.right ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n            }\n          }\n\n          if (position === 'left') {\n            return {\n              left: [\n                ...(old?.left ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n              right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n            }\n          }\n\n          return {\n            left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n            right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n          }\n        })\n      },\n\n      getCanPin: () => {\n        const leafColumns = column.getLeafColumns()\n\n        return leafColumns.some(\n          d =>\n            (d.columnDef.enablePinning ?? true) &&\n            (table.options.enablePinning ?? true)\n        )\n      },\n\n      getIsPinned: () => {\n        const leafColumnIds = column.getLeafColumns().map(d => d.id)\n\n        const { left, right } = table.getState().columnPinning\n\n        const isLeft = leafColumnIds.some(d => left?.includes(d))\n        const isRight = leafColumnIds.some(d => right?.includes(d))\n\n        return isLeft ? 'left' : isRight ? 'right' : false\n      },\n\n      getPinnedIndex: () => {\n        const position = column.getIsPinned()\n\n        return position\n          ? table.getState().columnPinning?.[position]?.indexOf(column.id) ?? -1\n          : 0\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ColumnPinningRow<TData> => {\n    return {\n      getCenterVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allCells, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allCells.filter(d => !leftAndRight.includes(d.column.id))\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'row.getCenterVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getLeftVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          ,\n        ],\n        (allCells, left) => {\n          const cells = (left ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'left' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getLeftVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getRightVisibleCells: memo(\n        () => [row._getAllVisibleCells(), table.getState().columnPinning.right],\n        (allCells, right) => {\n          const cells = (right ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'right' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getRightVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningInstance<TData> => {\n    return {\n      setColumnPinning: updater =>\n        table.options.onColumnPinningChange?.(updater),\n\n      resetColumnPinning: defaultState =>\n        table.setColumnPinning(\n          defaultState\n            ? getDefaultPinningState()\n            : table.initialState?.columnPinning ?? getDefaultPinningState()\n        ),\n\n      getIsSomeColumnsPinned: position => {\n        const pinningState = table.getState().columnPinning\n\n        if (!position) {\n          return Boolean(\n            pinningState.left?.length || pinningState.right?.length\n          )\n        }\n        return Boolean(pinningState[position]?.length)\n      },\n\n      getLeftLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.left],\n        (allColumns, left) => {\n          return (left ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getRightLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.right],\n        (allColumns, right) => {\n          return (right ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getCenterLeafColumns: memo(\n        () => [\n          table.getAllLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allColumns.filter(d => !leftAndRight.includes(d.id))\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, RowModel, Updater, RowData } from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type RowSelectionState = Record<string, boolean>\n\nexport interface RowSelectionTableState {\n  rowSelection: RowSelectionState\n}\n\nexport interface RowSelectionOptions<TData extends RowData> {\n  enableRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableMultiRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableSubRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  onRowSelectionChange?: OnChangeFn<RowSelectionState>\n  // enableGroupingRowSelection?:\n  //   | boolean\n  //   | ((\n  //       row: Row<TData>\n  //     ) => boolean)\n  // isAdditiveSelectEvent?: (e: unknown) => boolean\n  // isInclusiveSelectEvent?: (e: unknown) => boolean\n  // selectRowsFn?: (\n  //   table: Table<TData>,\n  //   rowModel: RowModel<TData>\n  // ) => RowModel<TData>\n}\n\nexport interface RowSelectionRow {\n  getIsSelected: () => boolean\n  getIsSomeSelected: () => boolean\n  getIsAllSubRowsSelected: () => boolean\n  getCanSelect: () => boolean\n  getCanMultiSelect: () => boolean\n  getCanSelectSubRows: () => boolean\n  toggleSelected: (value?: boolean) => void\n  getToggleSelectedHandler: () => (event: unknown) => void\n}\n\nexport interface RowSelectionInstance<TData extends RowData> {\n  getToggleAllRowsSelectedHandler: () => (event: unknown) => void\n  getToggleAllPageRowsSelectedHandler: () => (event: unknown) => void\n  setRowSelection: (updater: Updater<RowSelectionState>) => void\n  resetRowSelection: (defaultState?: boolean) => void\n  getIsAllRowsSelected: () => boolean\n  getIsAllPageRowsSelected: () => boolean\n  getIsSomeRowsSelected: () => boolean\n  getIsSomePageRowsSelected: () => boolean\n  toggleAllRowsSelected: (value?: boolean) => void\n  toggleAllPageRowsSelected: (value?: boolean) => void\n  getPreSelectedRowModel: () => RowModel<TData>\n  getSelectedRowModel: () => RowModel<TData>\n  getFilteredSelectedRowModel: () => RowModel<TData>\n  getGroupedSelectedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const RowSelection: TableFeature = {\n  getInitialState: (state): RowSelectionTableState => {\n    return {\n      rowSelection: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionOptions<TData> => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true,\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionInstance<TData> => {\n    return {\n      setRowSelection: updater => table.options.onRowSelectionChange?.(updater),\n      resetRowSelection: defaultState =>\n        table.setRowSelection(\n          defaultState ? {} : table.initialState.rowSelection ?? {}\n        ),\n      toggleAllRowsSelected: value => {\n        table.setRowSelection(old => {\n          value =\n            typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected()\n\n          const rowSelection = { ...old }\n\n          const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows\n\n          // We don't use `mutateRowIsSelected` here for performance reasons.\n          // All of the rows are flat already, so it wouldn't be worth it\n          if (value) {\n            preGroupedFlatRows.forEach(row => {\n              if (!row.getCanSelect()) {\n                return\n              }\n              rowSelection[row.id] = true\n            })\n          } else {\n            preGroupedFlatRows.forEach(row => {\n              delete rowSelection[row.id]\n            })\n          }\n\n          return rowSelection\n        })\n      },\n      toggleAllPageRowsSelected: value =>\n        table.setRowSelection(old => {\n          const resolvedValue =\n            typeof value !== 'undefined'\n              ? value\n              : !table.getIsAllPageRowsSelected()\n\n          const rowSelection: RowSelectionState = { ...old }\n\n          table.getRowModel().rows.forEach(row => {\n            mutateRowIsSelected(rowSelection, row.id, resolvedValue, table)\n          })\n\n          return rowSelection\n        }),\n\n      // addRowSelectionRange: rowId => {\n      //   const {\n      //     rows,\n      //     rowsById,\n      //     options: { selectGroupingRows, selectSubRows },\n      //   } = table\n\n      //   const findSelectedRow = (rows: Row[]) => {\n      //     let found\n      //     rows.find(d => {\n      //       if (d.getIsSelected()) {\n      //         found = d\n      //         return true\n      //       }\n      //       const subFound = findSelectedRow(d.subRows || [])\n      //       if (subFound) {\n      //         found = subFound\n      //         return true\n      //       }\n      //       return false\n      //     })\n      //     return found\n      //   }\n\n      //   const firstRow = findSelectedRow(rows) || rows[0]\n      //   const lastRow = rowsById[rowId]\n\n      //   let include = false\n      //   const selectedRowIds = {}\n\n      //   const addRow = (row: Row) => {\n      //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n      //       rowsById,\n      //       selectGroupingRows: selectGroupingRows!,\n      //       selectSubRows: selectSubRows!,\n      //     })\n      //   }\n\n      //   table.rows.forEach(row => {\n      //     const isFirstRow = row.id === firstRow.id\n      //     const isLastRow = row.id === lastRow.id\n\n      //     if (isFirstRow || isLastRow) {\n      //       if (!include) {\n      //         include = true\n      //       } else if (include) {\n      //         addRow(row)\n      //         include = false\n      //       }\n      //     }\n\n      //     if (include) {\n      //       addRow(row)\n      //     }\n      //   })\n\n      //   table.setRowSelection(selectedRowIds)\n      // },\n      getPreSelectedRowModel: () => table.getCoreRowModel(),\n      getSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getCoreRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getFilteredSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getFilteredRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getFilteredSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getGroupedSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getSortedRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getGroupedSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      ///\n\n      // getGroupingRowCanSelect: rowId => {\n      //   const row = table.getRow(rowId)\n\n      //   if (!row) {\n      //     throw new Error()\n      //   }\n\n      //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n      //     return table.options.enableGroupingRowSelection(row)\n      //   }\n\n      //   return table.options.enableGroupingRowSelection ?? false\n      // },\n\n      getIsAllRowsSelected: () => {\n        const preGroupedFlatRows = table.getFilteredRowModel().flatRows\n        const { rowSelection } = table.getState()\n\n        let isAllRowsSelected = Boolean(\n          preGroupedFlatRows.length && Object.keys(rowSelection).length\n        )\n\n        if (isAllRowsSelected) {\n          if (\n            preGroupedFlatRows.some(\n              row => row.getCanSelect() && !rowSelection[row.id]\n            )\n          ) {\n            isAllRowsSelected = false\n          }\n        }\n\n        return isAllRowsSelected\n      },\n\n      getIsAllPageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows\n        const { rowSelection } = table.getState()\n\n        let isAllPageRowsSelected = !!paginationFlatRows.length\n\n        if (\n          isAllPageRowsSelected &&\n          paginationFlatRows.some(row => !rowSelection[row.id])\n        ) {\n          isAllPageRowsSelected = false\n        }\n\n        return isAllPageRowsSelected\n      },\n\n      getIsSomeRowsSelected: () => {\n        const totalSelected = Object.keys(\n          table.getState().rowSelection ?? {}\n        ).length\n        return (\n          totalSelected > 0 &&\n          totalSelected < table.getFilteredRowModel().flatRows.length\n        )\n      },\n\n      getIsSomePageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows\n        return table.getIsAllPageRowsSelected()\n          ? false\n          : paginationFlatRows.some(\n              d => d.getIsSelected() || d.getIsSomeSelected()\n            )\n      },\n\n      getToggleAllRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n\n      getToggleAllPageRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllPageRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): RowSelectionRow => {\n    return {\n      toggleSelected: value => {\n        const isSelected = row.getIsSelected()\n\n        table.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !isSelected\n\n          if (isSelected === value) {\n            return old\n          }\n\n          const selectedRowIds = { ...old }\n\n          mutateRowIsSelected(selectedRowIds, row.id, value, table)\n\n          return selectedRowIds\n        })\n      },\n      getIsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isRowSelected(row, rowSelection)\n      },\n\n      getIsSomeSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'some'\n      },\n\n      getIsAllSubRowsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'all'\n      },\n\n      getCanSelect: () => {\n        if (typeof table.options.enableRowSelection === 'function') {\n          return table.options.enableRowSelection(row)\n        }\n\n        return table.options.enableRowSelection ?? true\n      },\n\n      getCanSelectSubRows: () => {\n        if (typeof table.options.enableSubRowSelection === 'function') {\n          return table.options.enableSubRowSelection(row)\n        }\n\n        return table.options.enableSubRowSelection ?? true\n      },\n\n      getCanMultiSelect: () => {\n        if (typeof table.options.enableMultiRowSelection === 'function') {\n          return table.options.enableMultiRowSelection(row)\n        }\n\n        return table.options.enableMultiRowSelection ?? true\n      },\n      getToggleSelectedHandler: () => {\n        const canSelect = row.getCanSelect()\n\n        return (e: unknown) => {\n          if (!canSelect) return\n          row.toggleSelected(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n\nconst mutateRowIsSelected = <TData extends RowData>(\n  selectedRowIds: Record<string, boolean>,\n  id: string,\n  value: boolean,\n  table: Table<TData>\n) => {\n  const row = table.getRow(id)\n\n  // const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key])\n    }\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true\n    }\n  } else {\n    delete selectedRowIds[id]\n  }\n  // }\n\n  if (row.subRows?.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row =>\n      mutateRowIsSelected(selectedRowIds, row.id, value, table)\n    )\n  }\n}\n\nexport function selectRowsFn<TData extends RowData>(\n  table: Table<TData>,\n  rowModel: RowModel<TData>\n): RowModel<TData> {\n  const rowSelection = table.getState().rowSelection\n\n  const newSelectedFlatRows: Row<TData>[] = []\n  const newSelectedRowsById: Record<string, Row<TData>> = {}\n\n  // Filters top level and nested rows\n  const recurseRows = (rows: Row<TData>[], depth = 0): Row<TData>[] => {\n    return rows\n      .map(row => {\n        const isSelected = isRowSelected(row, rowSelection)\n\n        if (isSelected) {\n          newSelectedFlatRows.push(row)\n          newSelectedRowsById[row.id] = row\n        }\n\n        if (row.subRows?.length) {\n          row = {\n            ...row,\n            subRows: recurseRows(row.subRows, depth + 1),\n          }\n        }\n\n        if (isSelected) {\n          return row\n        }\n      })\n      .filter(Boolean) as Row<TData>[]\n  }\n\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById,\n  }\n}\n\nexport function isRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>\n): boolean {\n  return selection[row.id] ?? false\n}\n\nexport function isSubRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>,\n  table: Table<TData>\n): boolean | 'some' | 'all' {\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n\n    return allChildrenSelected ? 'all' : someSelected ? 'some' : false\n  }\n\n  return false\n}\n","import { SortingFn } from './features/Sorting'\n\nexport const reSplitAlphaNumeric = /([0-9]+)/gm\n\nconst alphanumeric: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\nconst alphanumericCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst text: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst textCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\nconst datetime: SortingFn<any> = (rowA, rowB, columnId) => {\n  const a = rowA.getValue<Date>(columnId)\n  const b = rowB.getValue<Date>(columnId)\n\n  // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n  return a > b ? 1 : a < b ? -1 : 0\n}\n\nconst basic: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId))\n}\n\n// Utils\n\nfunction compareBasic(a: any, b: any) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction toString(a: any) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr: string, bStr: string) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean)\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift()!\n    const bb = b.shift()!\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0]!)) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1]!)) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\n// Exports\n\nexport const sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic,\n}\n\nexport type BuiltInSortingFn = keyof typeof sortingFns\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport {\n  BuiltInSortingFn,\n  reSplitAlphaNumeric,\n  sortingFns,\n} from '../sortingFns'\n\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  SortingFns,\n} from '../types'\n\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type SortDirection = 'asc' | 'desc'\n\nexport interface ColumnSort {\n  id: string\n  desc: boolean\n}\n\nexport type SortingState = ColumnSort[]\n\nexport interface SortingTableState {\n  sorting: SortingState\n}\n\nexport interface SortingFn<TData extends RowData> {\n  (rowA: Row<TData>, rowB: Row<TData>, columnId: string): number\n}\n\nexport type CustomSortingFns<TData extends RowData> = Record<\n  string,\n  SortingFn<TData>\n>\n\nexport type SortingFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof SortingFns\n  | BuiltInSortingFn\n  | SortingFn<TData>\n\nexport interface SortingColumnDef<TData extends RowData> {\n  sortingFn?: SortingFnOption<TData>\n  sortDescFirst?: boolean\n  enableSorting?: boolean\n  enableMultiSort?: boolean\n  invertSorting?: boolean\n  sortUndefined?: false | -1 | 1\n}\n\nexport interface SortingColumn<TData extends RowData> {\n  getAutoSortingFn: () => SortingFn<TData>\n  getAutoSortDir: () => SortDirection\n  getSortingFn: () => SortingFn<TData>\n  getFirstSortDir: () => SortDirection\n  getNextSortingOrder: () => SortDirection | false\n  getCanSort: () => boolean\n  getCanMultiSort: () => boolean\n  getSortIndex: () => number\n  getIsSorted: () => false | SortDirection\n  clearSorting: () => void\n  toggleSorting: (desc?: boolean, isMulti?: boolean) => void\n  getToggleSortingHandler: () => undefined | ((event: unknown) => void)\n}\n\ninterface SortingOptionsBase {\n  manualSorting?: boolean\n  onSortingChange?: OnChangeFn<SortingState>\n  enableSorting?: boolean\n  enableSortingRemoval?: boolean\n  enableMultiRemove?: boolean\n  enableMultiSort?: boolean\n  sortDescFirst?: boolean\n  getSortedRowModel?: (table: Table<any>) => () => RowModel<any>\n  maxMultiSortColCount?: number\n  isMultiSortEvent?: (e: unknown) => boolean\n}\n\ntype ResolvedSortingFns = keyof SortingFns extends never\n  ? {\n      sortingFns?: Record<string, SortingFn<any>>\n    }\n  : {\n      sortingFns: Record<keyof SortingFns, SortingFn<any>>\n    }\n\nexport interface SortingOptions<TData extends RowData>\n  extends SortingOptionsBase,\n    ResolvedSortingFns {}\n\nexport interface SortingInstance<TData extends RowData> {\n  setSorting: (updater: Updater<SortingState>) => void\n  resetSorting: (defaultState?: boolean) => void\n  getPreSortedRowModel: () => RowModel<TData>\n  getSortedRowModel: () => RowModel<TData>\n  _getSortedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Sorting: TableFeature = {\n  getInitialState: (state): SortingTableState => {\n    return {\n      sorting: [],\n      ...state,\n    }\n  },\n\n  getDefaultColumnDef: <TData extends RowData>(): SortingColumnDef<TData> => {\n    return {\n      sortingFn: 'auto',\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingOptions<TData> => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: (e: unknown) => {\n        return (e as MouseEvent).shiftKey\n      },\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): SortingColumn<TData> => {\n    return {\n      getAutoSortingFn: () => {\n        const firstRows = table.getFilteredRowModel().flatRows.slice(10)\n\n        let isString = false\n\n        for (const row of firstRows) {\n          const value = row?.getValue(column.id)\n\n          if (Object.prototype.toString.call(value) === '[object Date]') {\n            return sortingFns.datetime\n          }\n\n          if (typeof value === 'string') {\n            isString = true\n\n            if (value.split(reSplitAlphaNumeric).length > 1) {\n              return sortingFns.alphanumeric\n            }\n          }\n        }\n\n        if (isString) {\n          return sortingFns.text\n        }\n\n        return sortingFns.basic\n      },\n      getAutoSortDir: () => {\n        const firstRow = table.getFilteredRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return 'asc'\n        }\n\n        return 'desc'\n      },\n      getSortingFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.sortingFn)\n          ? column.columnDef.sortingFn\n          : column.columnDef.sortingFn === 'auto'\n          ? column.getAutoSortingFn()\n          : table.options.sortingFns?.[column.columnDef.sortingFn as string] ??\n            sortingFns[column.columnDef.sortingFn as BuiltInSortingFn]\n      },\n      toggleSorting: (desc, multi) => {\n        // if (column.columns.length) {\n        //   column.columns.forEach((c, i) => {\n        //     if (c.id) {\n        //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n        //     }\n        //   })\n        //   return\n        // }\n\n        // this needs to be outside of table.setSorting to be in sync with rerender\n        const nextSortingOrder = column.getNextSortingOrder()\n        const hasManualValue = typeof desc !== 'undefined' && desc !== null\n\n        table.setSorting(old => {\n          // Find any existing sorting for this column\n          const existingSorting = old?.find(d => d.id === column.id)\n          const existingIndex = old?.findIndex(d => d.id === column.id)\n\n          let newSorting: SortingState = []\n\n          // What should we do with this sort action?\n          let sortAction: 'add' | 'remove' | 'toggle' | 'replace'\n          let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc'\n\n          // Multi-mode\n          if (old?.length && column.getCanMultiSort() && multi) {\n            if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'add'\n            }\n          } else {\n            // Normal mode\n            if (old?.length && existingIndex !== old.length - 1) {\n              sortAction = 'replace'\n            } else if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'replace'\n            }\n          }\n\n          // Handle toggle states that will remove the sorting\n          if (sortAction === 'toggle') {\n            // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n            if (!hasManualValue) {\n              // Is our intention to remove?\n              if (!nextSortingOrder) {\n                sortAction = 'remove'\n              }\n            }\n          }\n\n          if (sortAction === 'add') {\n            newSorting = [\n              ...old,\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n            // Take latest n columns\n            newSorting.splice(\n              0,\n              newSorting.length -\n                (table.options.maxMultiSortColCount ?? Number.MAX_SAFE_INTEGER)\n            )\n          } else if (sortAction === 'toggle') {\n            // This flips (or sets) the\n            newSorting = old.map(d => {\n              if (d.id === column.id) {\n                return {\n                  ...d,\n                  desc: nextDesc,\n                }\n              }\n              return d\n            })\n          } else if (sortAction === 'remove') {\n            newSorting = old.filter(d => d.id !== column.id)\n          } else {\n            newSorting = [\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n          }\n\n          return newSorting\n        })\n      },\n\n      getFirstSortDir: () => {\n        const sortDescFirst =\n          column.columnDef.sortDescFirst ??\n          table.options.sortDescFirst ??\n          column.getAutoSortDir() === 'desc'\n        return sortDescFirst ? 'desc' : 'asc'\n      },\n\n      getNextSortingOrder: (multi?: boolean) => {\n        const firstSortDirection = column.getFirstSortDir()\n        const isSorted = column.getIsSorted()\n\n        if (!isSorted) {\n          return firstSortDirection\n        }\n\n        if (\n          isSorted !== firstSortDirection &&\n          (table.options.enableSortingRemoval ?? true) && // If enableSortRemove, enable in general\n          (multi ? table.options.enableMultiRemove ?? true : true) // If multi, don't allow if enableMultiRemove))\n        ) {\n          return false\n        }\n        return isSorted === 'desc' ? 'asc' : 'desc'\n      },\n\n      getCanSort: () => {\n        return (\n          (column.columnDef.enableSorting ?? true) &&\n          (table.options.enableSorting ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanMultiSort: () => {\n        return (\n          column.columnDef.enableMultiSort ??\n          table.options.enableMultiSort ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsSorted: () => {\n        const columnSort = table\n          .getState()\n          .sorting?.find(d => d.id === column.id)\n\n        return !columnSort ? false : columnSort.desc ? 'desc' : 'asc'\n      },\n\n      getSortIndex: () =>\n        table.getState().sorting?.findIndex(d => d.id === column.id) ?? -1,\n\n      clearSorting: () => {\n        //clear sorting for just 1 column\n        table.setSorting(old =>\n          old?.length ? old.filter(d => d.id !== column.id) : []\n        )\n      },\n\n      getToggleSortingHandler: () => {\n        const canSort = column.getCanSort()\n\n        return (e: unknown) => {\n          if (!canSort) return\n          ;(e as any).persist?.()\n          column.toggleSorting?.(\n            undefined,\n            column.getCanMultiSort()\n              ? table.options.isMultiSortEvent?.(e)\n              : false\n          )\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingInstance<TData> => {\n    return {\n      setSorting: updater => table.options.onSortingChange?.(updater),\n      resetSorting: defaultState => {\n        table.setSorting(defaultState ? [] : table.initialState?.sorting ?? [])\n      },\n      getPreSortedRowModel: () => table.getGroupedRowModel(),\n      getSortedRowModel: () => {\n        if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n          table._getSortedRowModel = table.options.getSortedRowModel(table)\n        }\n\n        if (table.options.manualSorting || !table._getSortedRowModel) {\n          return table.getPreSortedRowModel()\n        }\n\n        return table._getSortedRowModel()\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Updater,\n  Row,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type VisibilityState = Record<string, boolean>\n\nexport interface VisibilityTableState {\n  columnVisibility: VisibilityState\n}\n\nexport interface VisibilityOptions {\n  onColumnVisibilityChange?: OnChangeFn<VisibilityState>\n  enableHiding?: boolean\n}\n\nexport interface VisibilityDefaultOptions {\n  onColumnVisibilityChange: OnChangeFn<VisibilityState>\n}\n\nexport interface VisibilityInstance<TData extends RowData> {\n  getVisibleFlatColumns: () => Column<TData, unknown>[]\n  getVisibleLeafColumns: () => Column<TData, unknown>[]\n  getLeftVisibleLeafColumns: () => Column<TData, unknown>[]\n  getRightVisibleLeafColumns: () => Column<TData, unknown>[]\n  getCenterVisibleLeafColumns: () => Column<TData, unknown>[]\n  setColumnVisibility: (updater: Updater<VisibilityState>) => void\n  resetColumnVisibility: (defaultState?: boolean) => void\n  toggleAllColumnsVisible: (value?: boolean) => void\n  getIsAllColumnsVisible: () => boolean\n  getIsSomeColumnsVisible: () => boolean\n  getToggleAllColumnsVisibilityHandler: () => (event: unknown) => void\n}\n\nexport interface VisibilityColumnDef {\n  enableHiding?: boolean\n}\n\nexport interface VisibilityRow<TData extends RowData> {\n  _getAllVisibleCells: () => Cell<TData, unknown>[]\n  getVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface VisibilityColumn {\n  getCanHide: () => boolean\n  getIsVisible: () => boolean\n  toggleVisibility: (value?: boolean) => void\n  getToggleVisibilityHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const Visibility: TableFeature = {\n  getInitialState: (state): VisibilityTableState => {\n    return {\n      columnVisibility: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityDefaultOptions => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): VisibilityColumn => {\n    return {\n      toggleVisibility: value => {\n        if (column.getCanHide()) {\n          table.setColumnVisibility(old => ({\n            ...old,\n            [column.id]: value ?? !column.getIsVisible(),\n          }))\n        }\n      },\n      getIsVisible: () => {\n        return table.getState().columnVisibility?.[column.id] ?? true\n      },\n\n      getCanHide: () => {\n        return (\n          (column.columnDef.enableHiding ?? true) &&\n          (table.options.enableHiding ?? true)\n        )\n      },\n      getToggleVisibilityHandler: () => {\n        return (e: unknown) => {\n          column.toggleVisibility?.(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): VisibilityRow<TData> => {\n    return {\n      _getAllVisibleCells: memo(\n        () => [row.getAllCells(), table.getState().columnVisibility],\n        cells => {\n          return cells.filter(cell => cell.column.getIsVisible())\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row._getAllVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getVisibleCells: memo(\n        () => [\n          row.getLeftVisibleCells(),\n          row.getCenterVisibleCells(),\n          row.getRightVisibleCells(),\n        ],\n        (left, center, right) => [...left, ...center, ...right],\n        {\n          key: process.env.NODE_ENV === 'development' && 'row.getVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityInstance<TData> => {\n    const makeVisibleColumnsMethod = (\n      key: string,\n      getColumns: () => Column<TData, unknown>[]\n    ): (() => Column<TData, unknown>[]) => {\n      return memo(\n        () => [\n          getColumns(),\n          getColumns()\n            .filter(d => d.getIsVisible())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        columns => {\n          return columns.filter(d => d.getIsVisible?.())\n        },\n        {\n          key,\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      )\n    }\n\n    return {\n      getVisibleFlatColumns: makeVisibleColumnsMethod(\n        'getVisibleFlatColumns',\n        () => table.getAllFlatColumns()\n      ),\n      getVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getVisibleLeafColumns',\n        () => table.getAllLeafColumns()\n      ),\n      getLeftVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getLeftVisibleLeafColumns',\n        () => table.getLeftLeafColumns()\n      ),\n      getRightVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getRightVisibleLeafColumns',\n        () => table.getRightLeafColumns()\n      ),\n      getCenterVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getCenterVisibleLeafColumns',\n        () => table.getCenterLeafColumns()\n      ),\n\n      setColumnVisibility: updater =>\n        table.options.onColumnVisibilityChange?.(updater),\n\n      resetColumnVisibility: defaultState => {\n        table.setColumnVisibility(\n          defaultState ? {} : table.initialState.columnVisibility ?? {}\n        )\n      },\n\n      toggleAllColumnsVisible: value => {\n        value = value ?? !table.getIsAllColumnsVisible()\n\n        table.setColumnVisibility(\n          table.getAllLeafColumns().reduce(\n            (obj, column) => ({\n              ...obj,\n              [column.id]: !value ? !column.getCanHide?.() : value,\n            }),\n            {}\n          )\n        )\n      },\n\n      getIsAllColumnsVisible: () =>\n        !table.getAllLeafColumns().some(column => !column.getIsVisible?.()),\n\n      getIsSomeColumnsVisible: () =>\n        table.getAllLeafColumns().some(column => column.getIsVisible?.()),\n\n      getToggleAllColumnsVisibilityHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllColumnsVisible(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n","import { functionalUpdate, memo, RequiredKeys } from '../utils'\n\nimport {\n  Updater,\n  TableOptionsResolved,\n  TableState,\n  Table,\n  InitialTableState,\n  Row,\n  Column,\n  RowModel,\n  ColumnDef,\n  TableOptions,\n  RowData,\n  TableMeta,\n  ColumnDefResolved,\n  GroupColumnDef,\n} from '../types'\n\n//\nimport { createColumn } from './column'\nimport { Headers } from './headers'\n//\n\nimport { ColumnSizing } from '../features/ColumnSizing'\nimport { Expanding } from '../features/Expanding'\nimport { Filters } from '../features/Filters'\nimport { Grouping } from '../features/Grouping'\nimport { Ordering } from '../features/Ordering'\nimport { Pagination } from '../features/Pagination'\nimport { Pinning } from '../features/Pinning'\nimport { RowSelection } from '../features/RowSelection'\nimport { Sorting } from '../features/Sorting'\nimport { Visibility } from '../features/Visibility'\n\nexport interface TableFeature {\n  getDefaultOptions?: (table: any) => any\n  getInitialState?: (initialState?: InitialTableState) => any\n  createTable?: (table: any) => any\n  getDefaultColumnDef?: () => any\n  createColumn?: (column: any, table: any) => any\n  createHeader?: (column: any, table: any) => any\n  createCell?: (cell: any, column: any, row: any, table: any) => any\n  createRow?: (row: any, table: any) => any\n}\n\nconst features = [\n  Headers,\n  Visibility,\n  Ordering,\n  Pinning,\n  Filters,\n  Sorting,\n  Grouping,\n  Expanding,\n  Pagination,\n  RowSelection,\n  ColumnSizing,\n] as const\n\n//\n\nexport interface CoreTableState {}\n\nexport interface CoreOptions<TData extends RowData> {\n  data: TData[]\n  state: Partial<TableState>\n  onStateChange: (updater: Updater<TableState>) => void\n  debugAll?: boolean\n  debugTable?: boolean\n  debugHeaders?: boolean\n  debugColumns?: boolean\n  debugRows?: boolean\n  initialState?: InitialTableState\n  autoResetAll?: boolean\n  mergeOptions?: (\n    defaultOptions: TableOptions<TData>,\n    options: Partial<TableOptions<TData>>\n  ) => TableOptions<TData>\n  meta?: TableMeta<TData>\n  getCoreRowModel: (table: Table<any>) => () => RowModel<any>\n  getSubRows?: (originalRow: TData, index: number) => undefined | TData[]\n  getRowId?: (originalRow: TData, index: number, parent?: Row<TData>) => string\n  columns: ColumnDef<TData, any>[]\n  defaultColumn?: Partial<ColumnDef<TData, unknown>>\n  renderFallbackValue: any\n}\n\nexport interface CoreInstance<TData extends RowData> {\n  initialState: TableState\n  reset: () => void\n  options: RequiredKeys<TableOptionsResolved<TData>, 'state'>\n  setOptions: (newOptions: Updater<TableOptionsResolved<TData>>) => void\n  getState: () => TableState\n  setState: (updater: Updater<TableState>) => void\n  _features: readonly TableFeature[]\n  _queue: (cb: () => void) => void\n  _getRowId: (_: TData, index: number, parent?: Row<TData>) => string\n  getCoreRowModel: () => RowModel<TData>\n  _getCoreRowModel?: () => RowModel<TData>\n  getRowModel: () => RowModel<TData>\n  getRow: (id: string) => Row<TData>\n  _getDefaultColumnDef: () => Partial<ColumnDef<TData, unknown>>\n  _getColumnDefs: () => ColumnDef<TData, unknown>[]\n  _getAllFlatColumnsById: () => Record<string, Column<TData, unknown>>\n  getAllColumns: () => Column<TData, unknown>[]\n  getAllFlatColumns: () => Column<TData, unknown>[]\n  getAllLeafColumns: () => Column<TData, unknown>[]\n  getColumn: (columnId: string) => Column<TData, unknown>\n}\n\nexport function createTable<TData extends RowData>(\n  options: TableOptionsResolved<TData>\n): Table<TData> {\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...')\n  }\n\n  let table = { _features: features } as unknown as Table<TData>\n\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions?.(table))\n  }, {}) as TableOptionsResolved<TData>\n\n  const mergeOptions = (options: TableOptionsResolved<TData>) => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options)\n    }\n\n    return {\n      ...defaultOptions,\n      ...options,\n    }\n  }\n\n  const coreInitialState: CoreTableState = {}\n\n  let initialState = {\n    ...coreInitialState,\n    ...(options.initialState ?? {}),\n  } as TableState\n\n  table._features.forEach(feature => {\n    initialState = feature.getInitialState?.(initialState) ?? initialState\n  })\n\n  const queued: (() => void)[] = []\n  let queuedTimeout = false\n\n  const coreInstance: CoreInstance<TData> = {\n    _features: features,\n    options: {\n      ...defaultOptions,\n      ...options,\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb)\n\n      if (!queuedTimeout) {\n        queuedTimeout = true\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve()\n          .then(() => {\n            while (queued.length) {\n              queued.shift()!()\n            }\n            queuedTimeout = false\n          })\n          .catch(error =>\n            setTimeout(() => {\n              throw error\n            })\n          )\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState)\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options)\n      table.options = mergeOptions(newOptions) as RequiredKeys<\n        TableOptionsResolved<TData>,\n        'state'\n      >\n    },\n\n    getState: () => {\n      return table.options.state as TableState\n    },\n\n    setState: (updater: Updater<TableState>) => {\n      table.options.onStateChange?.(updater)\n    },\n\n    _getRowId: (row: TData, index: number, parent?: Row<TData>) =>\n      table.options.getRowId?.(row, index, parent) ??\n      `${parent ? [parent.id, index].join('.') : index}`,\n\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table)\n      }\n\n      return table._getCoreRowModel!()\n    },\n\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return table.getPaginationRowModel()\n    },\n    getRow: (id: string) => {\n      const row = table.getRowModel().rowsById[id]\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`)\n        }\n        throw new Error()\n      }\n\n      return row\n    },\n    _getDefaultColumnDef: memo(\n      () => [table.options.defaultColumn],\n      defaultColumn => {\n        defaultColumn = (defaultColumn ?? {}) as Partial<\n          ColumnDef<TData, unknown>\n        >\n\n        return {\n          header: props => {\n            const resolvedColumnDef = props.header.column\n              .columnDef as ColumnDefResolved<TData>\n\n            if (resolvedColumnDef.accessorKey) {\n              return resolvedColumnDef.accessorKey\n            }\n\n            if (resolvedColumnDef.accessorFn) {\n              return resolvedColumnDef.id\n            }\n\n            return null\n          },\n          // footer: props => props.header.column.id,\n          cell: props => props.renderValue<any>()?.toString?.() ?? null,\n          ...table._features.reduce((obj, feature) => {\n            return Object.assign(obj, feature.getDefaultColumnDef?.())\n          }, {}),\n          ...defaultColumn,\n        } as Partial<ColumnDef<TData, unknown>>\n      },\n      {\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n        key: process.env.NODE_ENV === 'development' && 'getDefaultColumnDef',\n      }\n    ),\n\n    _getColumnDefs: () => table.options.columns,\n\n    getAllColumns: memo(\n      () => [table._getColumnDefs()],\n      columnDefs => {\n        const recurseColumns = (\n          columnDefs: ColumnDef<TData, unknown>[],\n          parent?: Column<TData, unknown>,\n          depth = 0\n        ): Column<TData, unknown>[] => {\n          return columnDefs.map(columnDef => {\n            const column = createColumn(table, columnDef, depth, parent)\n\n            const groupingColumnDef = columnDef as GroupColumnDef<\n              TData,\n              unknown\n            >\n\n            column.columns = groupingColumnDef.columns\n              ? recurseColumns(groupingColumnDef.columns, column, depth + 1)\n              : []\n\n            return column\n          })\n        }\n\n        return recurseColumns(columnDefs)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllFlatColumns: memo(\n      () => [table.getAllColumns()],\n      allColumns => {\n        return allColumns.flatMap(column => {\n          return column.getFlatColumns()\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    _getAllFlatColumnsById: memo(\n      () => [table.getAllFlatColumns()],\n      flatColumns => {\n        return flatColumns.reduce((acc, column) => {\n          acc[column.id] = column\n          return acc\n        }, {} as Record<string, Column<TData, unknown>>)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumnsById',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllLeafColumns: memo(\n      () => [table.getAllColumns(), table._getOrderColumnsFn()],\n      (allColumns, orderColumns) => {\n        let leafColumns = allColumns.flatMap(column => column.getLeafColumns())\n        return orderColumns(leafColumns)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId]\n\n      if (!column) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(`[Table] Column with id ${columnId} does not exist.`)\n        }\n        throw new Error()\n      }\n\n      return column\n    },\n  }\n\n  Object.assign(table, coreInstance)\n\n  table._features.forEach(feature => {\n    return Object.assign(table, feature.createTable?.(table))\n  })\n\n  return table\n}\n","import { RowData, Cell, Column, Row, Table } from '../types'\nimport { Getter, memo } from '../utils'\n\nexport interface CellContext<TData extends RowData, TValue> {\n  table: Table<TData>\n  column: Column<TData, TValue>\n  row: Row<TData>\n  cell: Cell<TData, TValue>\n  getValue: Getter<TValue>\n  renderValue: Getter<TValue | null>\n}\n\nexport interface CoreCell<TData extends RowData, TValue> {\n  id: string\n  getValue: CellContext<TData, TValue>['getValue']\n  renderValue: CellContext<TData, TValue>['renderValue']\n  row: Row<TData>\n  column: Column<TData, TValue>\n  getContext: () => CellContext<TData, TValue>\n}\n\nexport function createCell<TData extends RowData, TValue>(\n  table: Table<TData>,\n  row: Row<TData>,\n  column: Column<TData, TValue>,\n  columnId: string\n): Cell<TData, TValue> {\n  const getRenderValue = () =>\n    cell.getValue() ?? table.options.renderFallbackValue\n\n  const cell: CoreCell<TData, TValue> = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: memo(\n      () => [table, column, row, cell],\n      (table, column, row, cell) => ({\n        table,\n        column,\n        row,\n        cell: cell as Cell<TData, TValue>,\n        getValue: cell.getValue,\n        renderValue: cell.renderValue,\n      }),\n      {\n        key: process.env.NODE_ENV === 'development' && 'cell.getContext',\n        debug: () => table.options.debugAll,\n      }\n    ),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(\n      cell,\n      feature.createCell?.(\n        cell as Cell<TData, TValue>,\n        column,\n        row as Row<TData>,\n        table\n      )\n    )\n  }, {})\n\n  return cell as Cell<TData, TValue>\n}\n","import { RowData, Cell, Row, Table } from '../types'\nimport { flattenBy, memo } from '../utils'\nimport { createCell } from './cell'\n\nexport interface CoreRow<TData extends RowData> {\n  id: string\n  index: number\n  original: TData\n  depth: number\n  _valuesCache: Record<string, unknown>\n  _uniqueValuesCache: Record<string, unknown>\n  getValue: <TValue>(columnId: string) => TValue\n  getUniqueValues: <TValue>(columnId: string) => TValue[]\n  renderValue: <TValue>(columnId: string) => TValue\n  subRows: Row<TData>[]\n  getLeafRows: () => Row<TData>[]\n  originalSubRows?: TData[]\n  getAllCells: () => Cell<TData, unknown>[]\n  _getAllCellsByColumnId: () => Record<string, Cell<TData, unknown>>\n}\n\nexport const createRow = <TData extends RowData>(\n  table: Table<TData>,\n  id: string,\n  original: TData,\n  rowIndex: number,\n  depth: number,\n  subRows?: Row<TData>[]\n): Row<TData> => {\n  let row: CoreRow<TData> = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    _valuesCache: {},\n    _uniqueValuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column.accessorFn) {\n        return undefined\n      }\n\n      row._valuesCache[columnId] = column.accessorFn(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._valuesCache[columnId] as any\n    },\n    getUniqueValues: columnId => {\n      if (row._uniqueValuesCache.hasOwnProperty(columnId)) {\n        return row._uniqueValuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column.accessorFn) {\n        return undefined\n      }\n\n      if (!column.columnDef.getUniqueValues) {\n        row._uniqueValuesCache[columnId] = [row.getValue(columnId)]\n        return row._uniqueValuesCache[columnId]\n      }\n\n      row._uniqueValuesCache[columnId] = column.columnDef.getUniqueValues(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._uniqueValuesCache[columnId] as any\n    },\n    renderValue: columnId =>\n      row.getValue(columnId) ?? table.options.renderFallbackValue,\n    subRows: subRows ?? [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getAllCells: memo(\n      () => [table.getAllLeafColumns()],\n      leafColumns => {\n        return leafColumns.map(column => {\n          return createCell(table, row as Row<TData>, column, column.id)\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'row.getAllCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n\n    _getAllCellsByColumnId: memo(\n      () => [row.getAllCells()],\n      allCells => {\n        return allCells.reduce((acc, cell) => {\n          acc[cell.column.id] = cell\n          return acc\n        }, {} as Record<string, Cell<TData, unknown>>)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' && 'row.getAllCellsByColumnId',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n  }\n\n  for (let i = 0; i < table._features.length; i++) {\n    const feature = table._features[i]\n    Object.assign(row, feature?.createRow?.(row, table))\n  }\n\n  return row as Row<TData>\n}\n","import { createRow } from '../core/row'\nimport { Row, RowModel, Table, RowData } from '../types'\n\nexport function filterRows<TData extends RowData>(\n  rows: Row<TData>[],\n  filterRowImpl: (row: Row<TData>) => any,\n  table: Table<TData>\n) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table)\n  }\n\n  return filterRowModelFromRoot(rows, filterRowImpl, table)\n}\n\nexport function filterRowModelFromLeafs<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => Row<TData>[],\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    const rows: Row<TData>[] = []\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const newRow = createRow(\n        table,\n        row.id,\n        row.original,\n        row.index,\n        row.depth\n      )\n      newRow.columnFilters = row.columnFilters\n\n      if (row.subRows?.length && depth < maxDepth) {\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n        row = newRow\n\n        if (filterRow(row) && !newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n          continue\n        }\n\n        if (filterRow(row) || newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n          continue\n        }\n      } else {\n        row = newRow\n        if (filterRow(row)) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n        }\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n\nexport function filterRowModelFromRoot<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => any,\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    // Filter from parents downward first\n\n    const rows = []\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const pass = filterRow(row)\n\n      if (pass) {\n        if (row.subRows?.length && depth < maxDepth) {\n          const newRow = createRow(\n            table,\n            row.id,\n            row.original,\n            row.index,\n            row.depth\n          )\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n          row = newRow\n        }\n\n        rows.push(row)\n        newFilteredFlatRows.push(row)\n        newFilteredRowsById[row.id] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getExpandedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().expanded,\n        table.getPreExpandedRowModel(),\n        table.options.paginateExpandedRows,\n      ],\n      (expanded, rowModel, paginateExpandedRows) => {\n        if (\n          !rowModel.rows.length ||\n          (expanded !== true && !Object.keys(expanded ?? {}).length)\n        ) {\n          return rowModel\n        }\n\n        if (!paginateExpandedRows) {\n          // Only expand rows at this point if they are being paginated\n          return rowModel\n        }\n\n        return expandRows(rowModel)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getExpandedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n\nexport function expandRows<TData extends RowData>(rowModel: RowModel<TData>) {\n  const expandedRows: Row<TData>[] = []\n\n  const handleRow = (row: Row<TData>) => {\n    expandedRows.push(row)\n\n    if (row.subRows?.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rowModel.rows.forEach(handleRow)\n\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById,\n  }\n}\n","import {\n  AccessorFn,\n  ColumnDef,\n  DisplayColumnDef,\n  GroupColumnDef,\n  IdentifiedColumnDef,\n  RowData,\n} from './types'\nimport { DeepKeys, DeepValue, RequiredKeys } from './utils'\n\n// type Person = {\n//   firstName: string\n//   lastName: string\n//   age: number\n//   visits: number\n//   status: string\n//   progress: number\n//   createdAt: Date\n//   nested: {\n//     foo: [\n//       {\n//         bar: 'bar'\n//       }\n//     ]\n//     bar: { subBar: boolean }[]\n//     baz: {\n//       foo: 'foo'\n//       bar: {\n//         baz: 'baz'\n//       }\n//     }\n//   }\n// }\n\n// const test: DeepKeys<Person> = 'nested.foo.0.bar'\n// const test2: DeepKeys<Person> = 'nested.bar'\n\n// const helper = createColumnHelper<Person>()\n\n// helper.accessor('nested.foo', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.foo.0.bar', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.bar', {\n//   cell: info => info.getValue(),\n// })\n\nexport type ColumnHelper<TData extends RowData> = {\n  accessor: <\n    TAccessor extends AccessorFn<TData> | DeepKeys<TData>,\n    TValue extends TAccessor extends AccessorFn<TData, infer TReturn>\n      ? TReturn\n      : TAccessor extends DeepKeys<TData>\n      ? DeepValue<TData, TAccessor>\n      : never\n  >(\n    accessor: TAccessor,\n    column: TAccessor extends AccessorFn<TData>\n      ? DisplayColumnDef<TData, TValue>\n      : IdentifiedColumnDef<TData, TValue>\n  ) => ColumnDef<TData, TValue>\n  display: (column: DisplayColumnDef<TData>) => ColumnDef<TData, unknown>\n  group: (column: GroupColumnDef<TData>) => ColumnDef<TData, unknown>\n}\n\nexport function createColumnHelper<\n  TData extends RowData\n>(): ColumnHelper<TData> {\n  return {\n    accessor: (accessor, column) => {\n      return typeof accessor === 'function'\n        ? ({\n            ...column,\n            accessorFn: accessor,\n          } as any)\n        : {\n            ...column,\n            accessorKey: accessor,\n          }\n    },\n    display: column => column as ColumnDef<TData, unknown>,\n    group: column => column as ColumnDef<TData, unknown>,\n  }\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getCoreRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.options.data],\n      (\n        data\n      ): {\n        rows: Row<TData>[]\n        flatRows: Row<TData>[]\n        rowsById: Record<string, Row<TData>>\n      } => {\n        const rowModel: RowModel<TData> = {\n          rows: [],\n          flatRows: [],\n          rowsById: {},\n        }\n\n        const accessRows = (\n          originalRows: TData[],\n          depth = 0,\n          parent?: Row<TData>\n        ): Row<TData>[] => {\n          const rows = [] as Row<TData>[]\n\n          for (let i = 0; i < originalRows.length; i++) {\n            // This could be an expensive check at scale, so we should move it somewhere else, but where?\n            // if (!id) {\n            //   if (process.env.NODE_ENV !== 'production') {\n            //     throw new Error(`getRowId expected an ID, but got ${id}`)\n            //   }\n            // }\n\n            // Make the row\n            const row = createRow(\n              table,\n              table._getRowId(originalRows[i]!, i, parent),\n              originalRows[i]!,\n              i,\n              depth\n            )\n\n            // Keep track of every row in a flat array\n            rowModel.flatRows.push(row)\n            // Also keep track of every row by its ID\n            rowModel.rowsById[row.id] = row\n            // Push table row into parent\n            rows.push(row)\n\n            // Get the original subrows\n            if (table.options.getSubRows) {\n              row.originalSubRows = table.options.getSubRows(\n                originalRows[i]!,\n                i\n              )\n\n              // Then recursively access them\n              if (row.originalSubRows?.length) {\n                row.subRows = accessRows(row.originalSubRows, depth + 1, row)\n              }\n            }\n          }\n\n          return rows\n        }\n\n        rowModel.rows = accessRows(data)\n\n        return rowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedMinMaxValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => undefined | [number, number] {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId).getFacetedRowModel()],\n      facetedRowModel => {\n        const firstValue =\n          facetedRowModel.flatRows[0]?.getUniqueValues(columnId)\n\n        if (typeof firstValue === 'undefined') {\n          return undefined\n        }\n\n        let facetedMinMaxValues: [any, any] = [firstValue, firstValue]\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (value < facetedMinMaxValues[0]) {\n              facetedMinMaxValues[0] = value\n            } else if (value > facetedMinMaxValues[1]) {\n              facetedMinMaxValues[1] = value\n            }\n          }\n        }\n\n        return facetedMinMaxValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedMinMaxValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFacetedRowModel<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => RowModel<TData> {\n  return (table, columnId) =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n        table.getFilteredRowModel(),\n      ],\n      (preRowModel, columnFilters, globalFilter) => {\n        if (\n          !preRowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          return preRowModel\n        }\n\n        const filterableIds = [\n          ...columnFilters.map(d => d.id).filter(d => d !== columnId),\n          globalFilter ? '__global__' : undefined,\n        ].filter(Boolean) as string[]\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        return filterRows(preRowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedRowModel_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedUniqueValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => Map<any, number> {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId).getFacetedRowModel()],\n      facetedRowModel => {\n        let facetedUniqueValues = new Map<any, number>()\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (facetedUniqueValues.has(value)) {\n              facetedUniqueValues.set(\n                value,\n                (facetedUniqueValues.get(value) ?? 0) + 1\n              )\n            } else {\n              facetedUniqueValues.set(value, 1)\n            }\n          }\n        }\n\n        return facetedUniqueValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedUniqueValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { ResolvedColumnFilter } from '../features/Filters'\nimport { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFilteredRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n      ],\n      (rowModel, columnFilters, globalFilter) => {\n        if (\n          !rowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          for (let i = 0; i < rowModel.flatRows.length; i++) {\n            rowModel.flatRows[i]!.columnFilters = {}\n            rowModel.flatRows[i]!.columnFiltersMeta = {}\n          }\n          return rowModel\n        }\n\n        const resolvedColumnFilters: ResolvedColumnFilter<TData>[] = []\n        const resolvedGlobalFilters: ResolvedColumnFilter<TData>[] = []\n\n        ;(columnFilters ?? []).forEach(d => {\n          const column = table.getColumn(d.id)\n\n          if (!column) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Table: Could not find a column to filter with columnId: ${d.id}`\n              )\n            }\n          }\n\n          const filterFn = column.getFilterFn()\n\n          if (!filterFn) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`\n              )\n            }\n            return\n          }\n\n          resolvedColumnFilters.push({\n            id: d.id,\n            filterFn,\n            resolvedValue: filterFn.resolveFilterValue?.(d.value) ?? d.value,\n          })\n        })\n\n        const filterableIds = columnFilters.map(d => d.id)\n\n        const globalFilterFn = table.getGlobalFilterFn()\n\n        const globallyFilterableColumns = table\n          .getAllLeafColumns()\n          .filter(column => column.getCanGlobalFilter())\n\n        if (\n          globalFilter &&\n          globalFilterFn &&\n          globallyFilterableColumns.length\n        ) {\n          filterableIds.push('__global__')\n\n          globallyFilterableColumns.forEach(column => {\n            resolvedGlobalFilters.push({\n              id: column.id,\n              filterFn: globalFilterFn,\n              resolvedValue:\n                globalFilterFn.resolveFilterValue?.(globalFilter) ??\n                globalFilter,\n            })\n          })\n        }\n\n        let currentColumnFilter\n        let currentGlobalFilter\n\n        // Flag the prefiltered row model with each filter state\n        for (let j = 0; j < rowModel.flatRows.length; j++) {\n          const row = rowModel.flatRows[j]!\n\n          row.columnFilters = {}\n\n          if (resolvedColumnFilters.length) {\n            for (let i = 0; i < resolvedColumnFilters.length; i++) {\n              currentColumnFilter = resolvedColumnFilters[i]!\n              const id = currentColumnFilter.id\n\n              // Tag the row with the column filter state\n              row.columnFilters[id] = currentColumnFilter.filterFn(\n                row,\n                id,\n                currentColumnFilter.resolvedValue,\n                filterMeta => {\n                  row.columnFiltersMeta[id] = filterMeta\n                }\n              )\n            }\n          }\n\n          if (resolvedGlobalFilters.length) {\n            for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n              currentGlobalFilter = resolvedGlobalFilters[i]!\n              const id = currentGlobalFilter.id\n              // Tag the row with the first truthy global filter state\n              if (\n                currentGlobalFilter.filterFn(\n                  row,\n                  id,\n                  currentGlobalFilter.resolvedValue,\n                  filterMeta => {\n                    row.columnFiltersMeta[id] = filterMeta\n                  }\n                )\n              ) {\n                row.columnFilters.__global__ = true\n                break\n              }\n            }\n\n            if (row.columnFilters.__global__ !== true) {\n              row.columnFilters.__global__ = false\n            }\n          }\n        }\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        // Filter final rows using all of the active filters\n        return filterRows(rowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getFilteredRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { flattenBy, memo } from '../utils'\n\nexport function getGroupedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().grouping, table.getPreGroupedRowModel()],\n      (grouping, rowModel) => {\n        if (!rowModel.rows.length || !grouping.length) {\n          return rowModel\n        }\n\n        // Filter the grouping list down to columns that exist\n        const existingGrouping = grouping.filter(columnId =>\n          table.getColumn(columnId)\n        )\n\n        const groupedFlatRows: Row<TData>[] = []\n        const groupedRowsById: Record<string, Row<TData>> = {}\n        // const onlyGroupedFlatRows: Row[] = [];\n        // const onlyGroupedRowsById: Record<RowId, Row> = {};\n        // const nonGroupedFlatRows: Row[] = [];\n        // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n        // Recursively group the data\n        const groupUpRecursively = (\n          rows: Row<TData>[],\n          depth = 0,\n          parentId?: string\n        ) => {\n          // Grouping depth has been been met\n          // Stop grouping and simply rewrite thd depth and row relationships\n          if (depth >= existingGrouping.length) {\n            return rows.map(row => {\n              row.depth = depth\n\n              groupedFlatRows.push(row)\n              groupedRowsById[row.id] = row\n\n              if (row.subRows) {\n                row.subRows = groupUpRecursively(row.subRows, depth + 1)\n              }\n\n              return row\n            })\n          }\n\n          const columnId = existingGrouping[depth]!\n\n          // Group the rows together for this level\n          const rowGroupsMap = groupBy(rows, columnId)\n\n          // Peform aggregations for each group\n          const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map(\n            ([groupingValue, groupedRows], index) => {\n              let id = `${columnId}:${groupingValue}`\n              id = parentId ? `${parentId}>${id}` : id\n\n              // First, Recurse to group sub rows before aggregation\n              const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n              // Flatten the leaf rows of the rows in this group\n              const leafRows = depth\n                ? flattenBy(groupedRows, row => row.subRows)\n                : groupedRows\n\n              const row = createRow(\n                table,\n                id,\n                leafRows[0]!.original,\n                index,\n                depth\n              )\n\n              Object.assign(row, {\n                groupingColumnId: columnId,\n                groupingValue,\n                subRows,\n                leafRows,\n                getValue: (columnId: string) => {\n                  // Don't aggregate columns that are in the grouping\n                  if (existingGrouping.includes(columnId)) {\n                    if (row._valuesCache.hasOwnProperty(columnId)) {\n                      return row._valuesCache[columnId]\n                    }\n\n                    if (groupedRows[0]) {\n                      row._valuesCache[columnId] =\n                        groupedRows[0].getValue(columnId) ?? undefined\n                    }\n\n                    return row._valuesCache[columnId]\n                  }\n\n                  if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n                    return row._groupingValuesCache[columnId]\n                  }\n\n                  // Aggregate the values\n                  const column = table.getColumn(columnId)\n                  const aggregateFn = column.getAggregationFn()\n\n                  if (aggregateFn) {\n                    row._groupingValuesCache[columnId] = aggregateFn(\n                      columnId,\n                      leafRows,\n                      groupedRows\n                    )\n\n                    return row._groupingValuesCache[columnId]\n                  }\n                },\n              })\n\n              subRows.forEach(subRow => {\n                groupedFlatRows.push(subRow)\n                groupedRowsById[subRow.id] = subRow\n                // if (subRow.getIsGrouped?.()) {\n                //   onlyGroupedFlatRows.push(subRow);\n                //   onlyGroupedRowsById[subRow.id] = subRow;\n                // } else {\n                //   nonGroupedFlatRows.push(subRow);\n                //   nonGroupedRowsById[subRow.id] = subRow;\n                // }\n              })\n\n              return row\n            }\n          )\n\n          return aggregatedGroupedRows\n        }\n\n        const groupedRows = groupUpRecursively(rowModel.rows, 0, '')\n\n        groupedRows.forEach(subRow => {\n          groupedFlatRows.push(subRow)\n          groupedRowsById[subRow.id] = subRow\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        })\n\n        return {\n          rows: groupedRows,\n          flatRows: groupedFlatRows,\n          rowsById: groupedRowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getGroupedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._queue(() => {\n            table._autoResetExpanded()\n            table._autoResetPageIndex()\n          })\n        },\n      }\n    )\n}\n\nfunction groupBy<TData extends RowData>(rows: Row<TData>[], columnId: string) {\n  const groupMap = new Map<any, Row<TData>[]>()\n\n  return rows.reduce((map, row) => {\n    const resKey = `${row.getValue(columnId)}`\n    const previous = map.get(resKey)\n    if (!previous) {\n      map.set(resKey, [row])\n    } else {\n      previous.push(row)\n    }\n    return map\n  }, groupMap)\n}\n","import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { expandRows } from './getExpandedRowModel'\n\nexport function getPaginationRowModel<TData extends RowData>(opts?: {\n  initialSync: boolean\n}): (table: Table<TData>) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().pagination,\n        table.getPrePaginationRowModel(),\n        table.options.paginateExpandedRows\n          ? undefined\n          : table.getState().expanded,\n      ],\n      (pagination, rowModel) => {\n        if (!rowModel.rows.length) {\n          return rowModel\n        }\n\n        const { pageSize, pageIndex } = pagination\n        let { rows, flatRows, rowsById } = rowModel\n        const pageStart = pageSize * pageIndex\n        const pageEnd = pageStart + pageSize\n\n        rows = rows.slice(pageStart, pageEnd)\n\n        let paginatedRowModel: RowModel<TData>\n\n        if (!table.options.paginateExpandedRows) {\n          paginatedRowModel = expandRows({\n            rows,\n            flatRows,\n            rowsById,\n          })\n        } else {\n          paginatedRowModel = {\n            rows,\n            flatRows,\n            rowsById,\n          }\n        }\n\n        paginatedRowModel.flatRows = []\n\n        const handleRow = (row: Row<TData>) => {\n          paginatedRowModel.flatRows.push(row)\n          if (row.subRows.length) {\n            row.subRows.forEach(handleRow)\n          }\n        }\n\n        paginatedRowModel.rows.forEach(handleRow)\n\n        return paginatedRowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getPaginationRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { SortingFn } from '../features/Sorting'\nimport { memo } from '../utils'\n\nexport function getSortedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().sorting, table.getPreSortedRowModel()],\n      (sorting, rowModel) => {\n        if (!rowModel.rows.length || !sorting?.length) {\n          return rowModel\n        }\n\n        const sortingState = table.getState().sorting\n\n        const sortedFlatRows: Row<TData>[] = []\n\n        // Filter out sortings that correspond to non existing columns\n        const availableSorting = sortingState.filter(sort =>\n          table.getColumn(sort.id).getCanSort()\n        )\n\n        const columnInfoById: Record<\n          string,\n          {\n            sortUndefined?: false | -1 | 1\n            invertSorting?: boolean\n            sortingFn: SortingFn<TData>\n          }\n        > = {}\n\n        availableSorting.forEach(sortEntry => {\n          const column = table.getColumn(sortEntry.id)\n\n          columnInfoById[sortEntry.id] = {\n            sortUndefined: column.columnDef.sortUndefined,\n            invertSorting: column.columnDef.invertSorting,\n            sortingFn: column.getSortingFn(),\n          }\n        })\n\n        const sortData = (rows: Row<TData>[]) => {\n          // This will also perform a stable sorting using the row index\n          // if needed.\n          const sortedData = [...rows]\n\n          sortedData.sort((rowA, rowB) => {\n            for (let i = 0; i < availableSorting.length; i += 1) {\n              const sortEntry = availableSorting[i]!\n              const columnInfo = columnInfoById[sortEntry.id]!\n              const isDesc = sortEntry?.desc ?? false\n\n              if (columnInfo.sortUndefined) {\n                const aValue = rowA.getValue(sortEntry.id)\n                const bValue = rowB.getValue(sortEntry.id)\n\n                const aUndefined = typeof aValue === 'undefined'\n                const bUndefined = typeof bValue === 'undefined'\n\n                if (aUndefined || bUndefined) {\n                  return aUndefined && bUndefined\n                    ? 0\n                    : aUndefined\n                    ? columnInfo.sortUndefined\n                    : -columnInfo.sortUndefined\n                }\n              }\n\n              // This function should always return in ascending order\n              let sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id)\n\n              if (sortInt !== 0) {\n                if (isDesc) {\n                  sortInt *= -1\n                }\n\n                if (columnInfo.invertSorting) {\n                  sortInt *= -1\n                }\n\n                return sortInt\n              }\n            }\n\n            return rowA.index - rowB.index\n          })\n\n          // If there are sub-rows, sort them\n          sortedData.forEach(row => {\n            sortedFlatRows.push(row)\n            if (row.subRows?.length) {\n              row.subRows = sortData(row.subRows)\n            }\n          })\n\n          return sortedData\n        }\n\n        return {\n          rows: sortData(rowModel.rows),\n          flatRows: sortedFlatRows,\n          rowsById: rowModel.rowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getSortedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n"],"names":["functionalUpdate","updater","input","makeStateUpdater","key","instance","setState","old","isFunction","d","Function","flattenBy","arr","getChildren","flat","recurse","subArr","forEach","item","push","children","length","memo","getDeps","fn","opts","result","deps","depTime","debug","Date","now","newDeps","some","dep","index","resultTime","onChange","depEndTime","Math","round","resultEndTime","resultFpsPercentage","pad","str","num","String","console","info","max","min","createColumn","table","columnDef","depth","parent","_ref","_resolvedColumnDef$id","resolvedColumnDef","_getDefaultColumnDef","accessorKey","accessorFn","id","replace","undefined","header","includes","originalRow","split","Error","column","columns","getFlatColumns","flatMap","_table$options$debugA","options","debugAll","debugColumns","getLeafColumns","_getOrderColumnsFn","orderColumns","leafColumns","_table$options$debugA2","_features","reduce","obj","feature","Object","assign","createHeader","_options$id","isPlaceholder","placeholderId","subHeaders","colSpan","rowSpan","headerGroup","getLeafHeaders","leafHeaders","recurseHeader","h","map","getContext","Headers","createTable","getHeaderGroups","getAllColumns","getVisibleLeafColumns","getState","columnPinning","left","right","allColumns","_left$map$filter","_right$map$filter","leftColumns","columnId","find","filter","Boolean","rightColumns","buildHeaderGroups","process","debugHeaders","getCenterHeaderGroups","getLeftHeaderGroups","_left$map$filter2","_table$options$debugA3","getRightHeaderGroups","_right$map$filter2","_table$options$debugA4","getFooterGroups","headerGroups","reverse","_table$options$debugA5","getLeftFooterGroups","_table$options$debugA6","getCenterFooterGroups","_table$options$debugA7","getRightFooterGroups","_table$options$debugA8","getFlatHeaders","headers","_table$options$debugA9","getLeftFlatHeaders","_table$options$debugA10","getCenterFlatHeaders","_table$options$debugA11","getRightFlatHeaders","_table$options$debugA12","getCenterLeafHeaders","flatHeaders","_table$options$debugA13","getLeftLeafHeaders","_table$options$debugA14","getRightLeafHeaders","_table$options$debugA15","center","_left$0$headers","_center$0$headers","_right$0$headers","_table$options$debugA16","columnsToGroup","headerFamily","_headerGroups$0$heade","maxDepth","findMaxDepth","getIsVisible","createHeaderGroup","headersToGroup","join","pendingParentHeaders","headerToGroup","latestPendingParentHeader","bottomHeaders","recurseHeadersForSpans","childRowSpans","childColSpan","childRowSpan","defaultColumnSizing","size","minSize","maxSize","Number","MAX_SAFE_INTEGER","ColumnSizing","getDefaultColumnDef","getInitialState","state","columnSizing","columnSizingInfo","startOffset","startSize","deltaOffset","deltaPercentage","isResizingColumn","columnSizingStart","getDefaultOptions","columnResizeMode","onColumnSizingChange","onColumnSizingInfoChange","getSize","_column$columnDef$min","_column$columnDef$max","columnSize","getStart","position","getLeftVisibleLeafColumns","getRightVisibleLeafColumns","findIndex","prevSiblingColumn","resetSize","setColumnSizing","_ref2","_","rest","getCanResize","_column$columnDef$ena","_table$options$enable","enableResizing","enableColumnResizing","getIsResizing","sum","_header$column$getSiz","prevSiblingHeader","getResizeHandler","getColumn","canResize","e","persist","isTouchStartEvent","touches","clientX","newColumnSizing","updateOffset","eventType","clientXPos","setColumnSizingInfo","_old$startOffset","_old$startSize","_ref3","headerSize","onMove","onEnd","mouseEvents","moveHandler","upHandler","document","removeEventListener","touchEvents","cancelable","preventDefault","stopPropagation","passiveIfSupported","passiveEventSupported","passive","addEventListener","resetColumnSizing","defaultState","_table$initialState$c","initialState","resetHeaderSizeInfo","_table$initialState$c2","getDefaultColumnSizingInfoState","getTotalSize","_table$getHeaderGroup","getLeftTotalSize","_table$getLeftHeaderG","getCenterTotalSize","_table$getCenterHeade","getRightTotalSize","_table$getRightHeader","passiveSupported","supported","noop","window","err","type","Expanding","expanded","onExpandedChange","paginateExpandedRows","registered","queued","_autoResetExpanded","_table$options$autoRe","autoResetAll","autoResetExpanded","manualExpanding","_queue","resetExpanded","setExpanded","toggleAllRowsExpanded","getIsAllRowsExpanded","_table$initialState$e","getCanSomeRowsExpand","getRowModel","flatRows","row","getCanExpand","getToggleAllRowsExpandedHandler","getIsSomeRowsExpanded","values","keys","getIsExpanded","getExpandedDepth","rowsById","splitId","getPreExpandedRowModel","getSortedRowModel","getExpandedRowModel","_getExpandedRowModel","createRow","toggleExpanded","_expanded","exists","oldExpanded","rowId","_table$options$getIsR","getIsRowExpanded","_table$options$getRow","getRowCanExpand","enableExpanding","subRows","getToggleExpandedHandler","canExpand","includesString","filterValue","search","toLowerCase","getValue","autoRemove","val","testFalsey","includesStringSensitive","equalsString","arrIncludes","arrIncludesAll","arrIncludesSome","equals","weakEquals","inNumberRange","rowValue","resolveFilterValue","unsafeMin","unsafeMax","parsedMin","parseFloat","parsedMax","isNaN","Infinity","temp","filterFns","Filters","filterFn","columnFilters","globalFilter","onColumnFiltersChange","onGlobalFilterChange","filterFromLeafRows","maxLeafRowFilterDepth","globalFilterFn","getColumnCanGlobalFilter","value","getCoreRowModel","_getAllCellsByColumnId","getAutoFilterFn","Array","isArray","getFilterFn","_table$options$filter","getCanFilter","_table$options$enable2","enableColumnFilter","enableColumnFilters","enableFilters","getCanGlobalFilter","_column$columnDef$ena2","_table$options$enable3","_table$options$enable4","_table$options$getCol","enableGlobalFilter","getIsFiltered","getFilterIndex","getFilterValue","_table$getState$colum","setFilterValue","setColumnFilters","previousfilter","newFilter","_old$filter","shouldAutoRemoveFilter","newFilterObj","_old$map","_getFacetedRowModel","getFacetedRowModel","getPreFilteredRowModel","_getFacetedUniqueValues","getFacetedUniqueValues","Map","_getFacetedMinMaxValues","getFacetedMinMaxValues","columnFiltersMeta","getGlobalAutoFilterFn","getGlobalFilterFn","_table$options$filter2","getAllLeafColumns","setGlobalFilter","resetGlobalFilter","resetColumnFilters","getFilteredRowModel","_getFilteredRowModel","manualFiltering","_getGlobalFacetedRowModel","getGlobalFacetedRowModel","_getGlobalFacetedUniqueValues","getGlobalFacetedUniqueValues","_getGlobalFacetedMinMaxValues","getGlobalFacetedMinMaxValues","aggregationFns","_leafRows","childRows","next","nextValue","extent","mean","leafRows","count","median","unique","from","Set","uniqueCount","_columnId","Grouping","aggregatedCell","props","_toString","toString","aggregationFn","grouping","onGroupingChange","groupedColumnMode","toggleGrouping","setGrouping","getCanGroup","enableGrouping","getIsGrouped","getGroupedIndex","indexOf","getToggleGroupingHandler","canGroup","getAutoAggregationFn","prototype","call","getAggregationFn","_table$options$aggreg","resetGrouping","_table$initialState$g","getPreGroupedRowModel","getGroupedRowModel","_getGroupedRowModel","manualGrouping","groupingColumnId","_groupingValuesCache","createCell","cell","getIsPlaceholder","getIsAggregated","nonGroupingColumns","col","g","Ordering","columnOrder","onColumnOrderChange","setColumnOrder","resetColumnOrder","orderedColumns","columnOrderCopy","columnsCopy","targetColumnId","shift","foundIndex","splice","Pagination","pagination","pageIndex","pageSize","onPaginationChange","_autoResetPageIndex","autoResetPageIndex","manualPagination","resetPageIndex","setPagination","resetPagination","_table$initialState$p","getDefaultPaginationState","setPageIndex","maxPageIndex","pageCount","_table$initialState$p2","resetPageSize","_table$initialState$p3","setPageSize","topRowIndex","floor","setPageCount","_table$options$pageCo","newPageCount","getPageOptions","getPageCount","pageOptions","fill","i","debugTable","getCanPreviousPage","getCanNextPage","previousPage","nextPage","getPrePaginationRowModel","getPaginationRowModel","_getPaginationRowModel","_table$options$pageCo2","ceil","rows","Pinning","onColumnPinningChange","pin","columnIds","setColumnPinning","_old$left3","_old$right3","_old$left","_old$right","_old$left2","_old$right2","getCanPin","_d$columnDef$enablePi","enablePinning","getIsPinned","leafColumnIds","isLeft","isRight","getPinnedIndex","getCenterVisibleCells","_getAllVisibleCells","allCells","leftAndRight","debugRows","getLeftVisibleCells","getRightVisibleCells","resetColumnPinning","getDefaultPinningState","getIsSomeColumnsPinned","pinningState","getLeftLeafColumns","getRightLeafColumns","getCenterLeafColumns","RowSelection","rowSelection","onRowSelectionChange","enableRowSelection","enableMultiRowSelection","enableSubRowSelection","setRowSelection","resetRowSelection","_table$initialState$r","toggleAllRowsSelected","getIsAllRowsSelected","preGroupedFlatRows","getCanSelect","toggleAllPageRowsSelected","resolvedValue","getIsAllPageRowsSelected","mutateRowIsSelected","getPreSelectedRowModel","getSelectedRowModel","rowModel","selectRowsFn","getFilteredSelectedRowModel","getGroupedSelectedRowModel","isAllRowsSelected","paginationFlatRows","isAllPageRowsSelected","getIsSomeRowsSelected","_table$getState$rowSe","totalSelected","getIsSomePageRowsSelected","getIsSelected","getIsSomeSelected","getToggleAllRowsSelectedHandler","target","checked","getToggleAllPageRowsSelectedHandler","toggleSelected","isSelected","selectedRowIds","isRowSelected","isSubRowSelected","getIsAllSubRowsSelected","getCanSelectSubRows","getCanMultiSelect","getToggleSelectedHandler","canSelect","getRow","newSelectedFlatRows","newSelectedRowsById","recurseRows","selection","_selection$row$id","allChildrenSelected","someSelected","subRow","reSplitAlphaNumeric","compareBasic","a","b","compareAlphanumeric","aStr","bStr","aa","bb","an","parseInt","bn","combo","sort","sortingFns","alphanumeric","rowA","rowB","alphanumericCaseSensitive","text","textCaseSensitive","datetime","basic","Sorting","sorting","sortingFn","onSortingChange","isMultiSortEvent","shiftKey","getAutoSortingFn","firstRows","slice","isString","getAutoSortDir","getSortingFn","_table$options$sortin","toggleSorting","desc","multi","nextSortingOrder","getNextSortingOrder","hasManualValue","setSorting","existingSorting","existingIndex","sortAction","newSorting","nextDesc","_table$options$maxMul","getCanMultiSort","maxMultiSortColCount","getFirstSortDir","_column$columnDef$sor","sortDescFirst","firstSortDirection","isSorted","getIsSorted","enableSortingRemoval","enableMultiRemove","getCanSort","enableSorting","enableMultiSort","columnSort","getSortIndex","_table$getState$sorti","clearSorting","getToggleSortingHandler","canSort","resetSorting","_table$initialState$s","getPreSortedRowModel","_getSortedRowModel","manualSorting","Visibility","columnVisibility","onColumnVisibilityChange","toggleVisibility","getCanHide","setColumnVisibility","enableHiding","getToggleVisibilityHandler","getAllCells","cells","getVisibleCells","makeVisibleColumnsMethod","getColumns","getVisibleFlatColumns","getAllFlatColumns","getCenterVisibleLeafColumns","resetColumnVisibility","toggleAllColumnsVisible","_value","getIsAllColumnsVisible","getIsSomeColumnsVisible","getToggleAllColumnsVisibilityHandler","features","renderValue","_cell$getValue","renderFallbackValue","original","rowIndex","_valuesCache","_uniqueValuesCache","hasOwnProperty","getUniqueValues","_row$getValue","getLeafRows","acc","filterRows","filterRowImpl","rowsToFilter","filterRow","_table$options$maxLea","newFilteredFlatRows","newFilteredRowsById","recurseFilterRows","newRow","filterRowModelFromLeafs","_table$options$maxLea2","filterRowModelFromRoot","expandRows","expandedRows","handleRow","accessor","display","group","_options$initialState","defaultOptions","_feature$getInitialSt","queuedTimeout","coreInstance","cb","Promise","resolve","then","catch","error","setTimeout","reset","setOptions","newOptions","mergeOptions","onStateChange","_getRowId","getRowId","_getCoreRowModel","defaultColumn","_defaultColumn","_props$renderValue$to","_getColumnDefs","columnDefs","recurseColumns","groupingColumnDef","_getAllFlatColumnsById","flatColumns","data","accessRows","originalRows","getSubRows","originalSubRows","facetedRowModel","firstValue","facetedMinMaxValues","j","preRowModel","filterableIds","facetedUniqueValues","_facetedUniqueValues$","has","set","get","resolvedColumnFilters","resolvedGlobalFilters","_filterFn$resolveFilt","globallyFilterableColumns","currentColumnFilter","currentGlobalFilter","_globalFilterFn$resol","filterMeta","__global__","existingGrouping","groupedFlatRows","groupedRowsById","groupUpRecursively","parentId","rowGroupsMap","groupMap","resKey","previous","groupBy","aggregatedGroupedRows","entries","groupingValue","groupedRows","_groupedRows$0$getVal","aggregateFn","pageStart","pageEnd","paginatedRowModel","sortingState","sortedFlatRows","availableSorting","columnInfoById","sortEntry","sortUndefined","invertSorting","sortData","sortedData","_sortEntry$desc","columnInfo","isDesc","aUndefined","bUndefined","sortInt"],"mappings":"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"}